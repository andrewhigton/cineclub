{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\n// Get all Films\nexport const loadFilms = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null //payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; // Get film by ID\n\nexport const getFilmById = film_id => async dispatch => {\n  dispatch({\n    type: ActionType.CLEAR_FILM,\n    payload: null\n  });\n\n  try {\n    const res = await axios.get(`/api/film/${film_id}`); // .populate('film', ['title', 'cinema']);\n\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null // payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; // create film\n// export const createFilm = ( formData: string, history needed? ) => async dispatch => {\n\nexport const createFilm = formData => async dispatch => // export const createFilm = ( formData, history) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/film/create-film', formData, config);\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    }); // history.push('/film/dashboard');\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    // }\n    if (err) {\n      alert(err); // alert(err.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null // payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; // export const updateFilm = (formData, history needed?) => async dispatch => {\n\nexport const updateFilm = (formData, history) => async dispatch => {\n  dispatch({\n    type: ActionType.CLEAR_FILM,\n    payload: null\n  });\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //need to create this as a named expoertr function??\n\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_FILM,\n      payload: res.data\n    });\n    alert('Thanks for your booking'); //history.push('/film/dashboard');\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    // }\n    if (err) {\n      alert(err);\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null // payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n};\nexport const stripePayment = () => async dispatch => {\n  console.log('called1');\n\n  const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\n\n  try {\n    const amount = 200; // JSON.parse(req.body.amount)\n    // const { amount } = JSON.parse(event.body);\n\n    const paymentIntent = stripe.paymentIntents.create({\n      amount,\n      currency: \"GBP\",\n      payment_method_types: [\"card\"]\n    });\n    console.log('called1');\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        paymentIntent\n      })\n    };\n  } catch (error) {\n    console.log({\n      error\n    });\n    console.log('called2');\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error\n      })\n    };\n  }\n}; // axios.post(\n//   const response = await fetch('/api/film/payment', {\n//   method: 'post',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ amount: amount * 100 }),\n// export const stripePayment = (priceForStripe, token) => async dispatch => {\n//     axios.post(\n//       { \n//         url: '/api/film/payment', \n//         // method: 'post',\n//         data: {\n//           amount: priceForStripe,\n//           token: token\n//         }\n//        })\n//        // , onPayment())\n//       .then(response => {\n//         // alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked'); \n//         window.location.replace('http://localhost:3000/film/dashboard');\n//        })\n//       .catch(error => {\n//         console.log('Payment error: ', JSON.parse(error));  \n//         alert('Payment error. Please use the provided credit card details');  \n//        }) \n//   } \n// export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/film.tsx"],"names":["axios","ActionType","loadFilms","dispatch","res","get","type","GET_FILMS","payload","data","err","FILM_ERROR","getFilmById","film_id","CLEAR_FILM","GET_FILM","createFilm","formData","config","headers","post","alert","updateFilm","history","put","UPDATE_FILM","stripePayment","console","log","stripe","require","process","env","STRIPE_SECRET_KEY","amount","paymentIntent","paymentIntents","create","currency","payment_method_types","statusCode","body","JSON","stringify","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionFilms } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\n\n// Get all Films\nexport const loadFilms = () => async (dispatch: Dispatch<ActionFilms>) => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null,\n      //payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n  };\n\n// Get film by ID\nexport const getFilmById = (film_id: number) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n   });\n  try {\n    const res = await axios.get(`/api/film/${film_id}`)\n    // .populate('film', ['title', 'cinema']);\n    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n      // payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// create film\n// export const createFilm = ( formData: string, history needed? ) => async dispatch => {\n  export const createFilm = ( formData ) => async (dispatch: Dispatch<ActionFilms>) => \n  // export const createFilm = ( formData, history) => async (dispatch: Dispatch<ActionFilms>) => \n  {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  \n    const res = await axios.post('/api/film/create-film', formData, config);    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n    // history.push('/film/dashboard');\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    // }\n\n    if (err) {\n      alert(err)\n      // alert(err.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n      // payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// export const updateFilm = (formData, history needed?) => async dispatch => {\nexport const updateFilm = (formData, history) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n     });\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    //need to create this as a named expoertr function??\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_FILM,\n      payload: res.data\n      });\n    alert('Thanks for your booking');\n    //history.push('/film/dashboard');\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    // }\n    if (err) {\n      alert(err)\n    }\n\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n      // payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\nexport const stripePayment = () => async dispatch => {\n    console.log('called1')\n\n    const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\n\ntry {\n    const amount = 200 \n    // JSON.parse(req.body.amount)\n    // const { amount } = JSON.parse(event.body);\n\n    const paymentIntent = stripe.paymentIntents.create({\n      amount,\n      currency: \"GBP\",\n      payment_method_types: [\"card\"],\n    });\nconsole.log('called1')\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ paymentIntent }),\n    };\n  } catch (error) {\n    console.log({ error });\nconsole.log('called2')\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error }),\n    };\n  }\n\n\n}\n    // axios.post(\n      \n      \n    //   const response = await fetch('/api/film/payment', {\n    //   method: 'post',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ amount: amount * 100 }),\n\n\n\n\n// export const stripePayment = (priceForStripe, token) => async dispatch => {\n    \n//     axios.post(\n//       { \n//         url: '/api/film/payment', \n//         // method: 'post',\n//         data: {\n//           amount: priceForStripe,\n//           token: token\n//         }\n//        })\n//        // , onPayment())\n//       .then(response => {\n//         // alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked'); \n//         window.location.replace('http://localhost:3000/film/dashboard');\n//        })\n//       .catch(error => {\n//         console.log('Payment error: ', JSON.parse(error));  \n//         alert('Payment error. Please use the provided credit card details');  \n//        }) \n//   } \n\n// export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };"]},"metadata":{},"sourceType":"module"}