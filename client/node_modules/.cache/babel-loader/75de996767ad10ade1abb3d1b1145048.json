{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useStripe, useElements, CardNumberElement, CardCvcElement, CardExpiryElement } from '@stripe/react-stripe-js';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport '../checkout-film/checkoutfilm.css';\nimport axios from 'axios';\n\nconst ifValidCardElement = card => card === null;\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    filmData,\n    ticketData,\n    price,\n    updateUserTickets,\n    updateFilm,\n    history\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements(); // const CardNumberElement = elements.create('cardNumber')\n  // const CardExpiryElement = elements.create('cardExpiry')\n  // const CardCvcElement = elements.create('cardCvc')\n  // CardNumberElement.mount('#card-number');\n  // CardExpiryElement.mount('#card-expiry');\n  // CardCvcElement.mount('#card-cvc');\n  // let currentUser = 'bob';\n\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  useHistory = history;\n  ticketDataForDispatch = ticketData;\n  filmDataForDispatch = filmData;\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    } //send price through here, to bakcend, but how?\n\n\n    try {\n      var _paymentResult$paymen;\n\n      const response = await axios.post('http://localhost:5000/api/film/payment');\n      const clientSecret = response.data;\n      const cardDetails = elements.getElement(CardNumberElement); // if(!ifValidCardElement(cardDetails)) {\n      // \treturn;\t\n      // }\n\n      if (cardDetails === null) return;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n\n      if ((paymentResult === null || paymentResult === void 0 ? void 0 : (_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        alert('payment success');\n        updateUserTickets(ticketDataForDispatch); //the problem, you updated film, but state is not updating before it has a chance to load \n\n        updateFilm(filmDataForDispatch);\n        history.push('/film/dashboard');\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      if (err instanceof Error) {\n        alert(err.message);\n      }\n    }\n  };\n\n  const inputStyle = {\n    fontWeight: '1000',\n    fontSize: '17px',\n    lineHeight: '35px'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, \"Card Payment\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardNumberElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(CardExpiryElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(CardCvcElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"checkout-button\",\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 6\n    }\n  }, \"Pay Now\")));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n    updateFilm: () => dispatch(updateFilm(filmDataForDispatch))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx"],"names":["React","useState","connect","useStripe","useElements","CardNumberElement","CardCvcElement","CardExpiryElement","updateUserTickets","updateFilm","axios","ifValidCardElement","card","useHistory","ticketDataForDispatch","filmDataForDispatch","StripeCheckoutButton","filmData","ticketData","price","history","stripe","elements","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","post","clientSecret","data","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","paymentIntent","status","alert","push","err","Error","message","inputStyle","fontWeight","fontSize","lineHeight","style","base","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAECC,SAFD,EAGCC,WAHD,EAICC,iBAJD,EAKCC,cALD,EAMCC,iBAND,QAOO,yBAPP;AAUA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,OAAO,mCAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,kBAAkB,GAAIC,IAAD,IAA+DA,IAAI,KAAK,IAAnG;;AAYA;AACA,IAAIC,UAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,mBAAJ;;AAEA,MAAMC,oBAA+C,GAAG,QAOjD;AAAA,MAPkD;AACxDC,IAAAA,QADwD;AAExDC,IAAAA,UAFwD;AAGxDC,IAAAA,KAHwD;AAIxDX,IAAAA,iBAJwD;AAKxDC,IAAAA,UALwD;AAMxDW,IAAAA;AANwD,GAOlD;AAEP,QAAMC,MAAM,GAAGlB,SAAS,EAAxB;AACA,QAAMmB,QAAQ,GAAGlB,WAAW,EAA5B,CAHO,CAKP;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,QAAM,CAACmB,mBAAD,EAAsBC,sBAAtB,IAAgDvB,QAAQ,CAAC,KAAD,CAA9D;AAEAY,EAAAA,UAAU,GAAGO,OAAb;AACAN,EAAAA,qBAAqB,GAAGI,UAAxB;AACAH,EAAAA,mBAAmB,GAAGE,QAAtB;;AAEA,QAAMQ,cAAc,GAAG,MAAOC,CAAP,IAAyC;AAE/DA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACN,MAAD,IAAW,CAACC,QAAf,EAAyB;AACxB;AACA,KAL8D,CAO/D;;;AACA,QAAK;AAAA;;AACL,YAAMM,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,wCAAX,CAAvB;AAEC,YAAMC,YAAY,GAAGF,QAAQ,CAACG,IAA9B;AAEA,YAAMC,WAAW,GAAGV,QAAQ,CAACW,UAAT,CAAoB5B,iBAApB,CAApB,CALI,CAOJ;AACA;AACA;;AAGA,UAAG2B,WAAW,KAAK,IAAnB,EAAyB;AAEvB,YAAME,aAAa,GAAG,MAAMb,MAAM,CAACc,kBAAP,CAA0BL,YAA1B,EAAwC;AAClEM,QAAAA,cAAc,EAAE;AACdxB,UAAAA,IAAI,EAAEoB,WADQ;AAEdK,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EAAE;AADS;AAFH;AADkD,OAAxC,CAA5B;;AASA,UAAG,CAAAJ,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEK,aAAf,gFAA8BC,MAA9B,MAAyC,WAA5C,EAAyD;AACxDC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACAjC,QAAAA,iBAAiB,CAACM,qBAAD,CAAjB,CAFwD,CAG1D;;AACAL,QAAAA,UAAU,CAACM,mBAAD,CAAV;AACAK,QAAAA,OAAO,CAACsB,IAAR,CAAa,iBAAb;AACE;;AAEDlB,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AAED,KAjCF,CAiCG,OAAOmB,GAAP,EAAY;AACb,UAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACzBH,QAAAA,KAAK,CAACE,GAAG,CAACE,OAAL,CAAL;AACA;AACD;AACD,GA9CF;;AAgDC,QAAMC,UAAU,GAAG;AACdC,IAAAA,UAAU,EAAE,MADE;AAEdC,IAAAA,QAAQ,EAAE,MAFI;AAGdC,IAAAA,UAAU,EAAE;AAHE,GAAnB;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAM,IAAA,QAAQ,EAAExB,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,iBAAD;AACA,IAAA,OAAO,EAAE;AACNyB,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEL;AADD;AADD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAQC,oBAAC,iBAAD;AACC,IAAA,OAAO,EAAE;AACNI,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEL;AADD;AADD,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,eAeC,oBAAC,cAAD;AACA,IAAA,OAAO,EAAE;AACNI,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEL;AADD;AADD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfD,eAsBC;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAoC,IAAA,QAAQ,EAAEvB,mBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtBD,CAFD,CADF;AA8BC,CA/GF;;AAiHA,MAAM6B,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACJ7C,IAAAA,iBAAiB,EAAE,MAAM6C,QAAQ,CAAC7C,iBAAiB,CAACM,qBAAD,EAAwBD,UAAxB,CAAlB,CAD7B;AAEJJ,IAAAA,UAAU,EAAE,MAAM4C,QAAQ,CAAC5C,UAAU,CAACM,mBAAD,CAAX;AAFtB,GAAP;AAID,CALD;;AAOA,eAAeb,OAAO,CAAC,IAAD,EAAOkD,kBAAP,CAAP,CAAkCpC,oBAAlC,CAAf","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { Elements, \n\tCardElement, \n\tuseStripe, \n\tuseElements, \n\tCardNumberElement, \n\tCardCvcElement, \n\tCardExpiryElement  \n} from '@stripe/react-stripe-js';\nimport { StripeCardElement  } from '@stripe/stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport { ticketType, filmInterface, filmType } from '../../utils/componentTypes';\nimport '../checkout-film/checkoutfilm.css'\nimport axios from 'axios';\n\n\nconst ifValidCardElement = (card: StripeCardElement | null): card is StripeCardElement => card === null;  \n\n\ninterface TicketFilmTypes {\n\tfilmData: filmType;\n\tticketData: ticketType;\n\tprice: number;\n\tupdateUserTickets: (ticketDataForDispatch) => void; \n\tupdateFilm: (filmDataForDispatch) => void; \n\thistory;\n}\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton: React.FC<TicketFilmTypes> = ({\n\tfilmData, \n\tticketData, \n\tprice,\n\tupdateUserTickets,\n\tupdateFilm,\n\thistory\n\t}) => {\n\nconst stripe = useStripe();\nconst elements = useElements();\n\n// const CardNumberElement = elements.create('cardNumber')\n// const CardExpiryElement = elements.create('cardExpiry')\n// const CardCvcElement = elements.create('cardCvc')\n\n// CardNumberElement.mount('#card-number');\n// CardExpiryElement.mount('#card-expiry');\n// CardCvcElement.mount('#card-cvc');\n\n// let currentUser = 'bob';\nconst [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\nuseHistory = history; \nticketDataForDispatch = ticketData;\nfilmDataForDispatch = filmData;\n\nconst paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\t//send price through here, to bakcend, but how?\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment') \n\t\n\t\tconst clientSecret = response.data;\n\n\t\tconst cardDetails = elements.getElement(CardNumberElement)\n\t\t\n\t\t// if(!ifValidCardElement(cardDetails)) {\n\t\t// \treturn;\t\n\t\t// }\n\n\n\t\tif(cardDetails === null) return;\n\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    if(paymentResult?.paymentIntent?.status === 'succeeded') {\n    \talert('payment success');\n    \tupdateUserTickets(ticketDataForDispatch);\n\t\t\t//the problem, you updated film, but state is not updating before it has a chance to load \n\t\t\tupdateFilm(filmDataForDispatch); \n\t\t\thistory.push('/film/dashboard'); \t\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t  alert(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst inputStyle = {\n      fontWeight: '1000',\n      fontSize: '17px',\n      lineHeight: '35px'\n\t\t}\n\n\treturn (\n\t\t\t<div className='checkout'>\n\t\t\t\t<h3>Card Payment</h3>\n\t\t\t\t<form onSubmit={paymentHandler}>\n\t\t\t\t\t<CardNumberElement \n\t\t\t\t\toptions={{\n   \t\t\t\t\tstyle: {\n     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t   },\n\t\t\t\t }}\n\t\t\t\t />\n\t\t\t\t\t<CardExpiryElement \n\t\t\t\t\t\toptions={{\n\t   \t\t\t\t\tstyle: {\n\t     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t\t   },\n\t\t\t\t\t }}\n\t\t\t\t\t/>\n\t\t\t\t\t<CardCvcElement \n\t\t\t\t\toptions={{\n   \t\t\t\t\tstyle: {\n     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t\t   },\n\t\t\t\t\t }}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className='checkout-button' disabled={isProcessingPayment}>Pay Now</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t )\n\t}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n     updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n     updateFilm: () => dispatch(updateFilm(filmDataForDispatch)) \n  }\n}\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}