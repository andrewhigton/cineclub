{"ast":null,"code":"import _objectWithoutProperties from\"/Users/andrewhigton/Documents/code/typescript/cineclub/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"component\",\"auth\",\"path\"];import React from'react';import{Route,Redirect}from'react-router-dom';import{connect}from'react-redux';// type RouteProps = {\n;var PrivateRoute=function PrivateRoute(props){var Component=props.component,_props$auth=props.auth,isAuthenticated=_props$auth.isAuthenticated,loading=_props$auth.loading,path=props.path,rest=_objectWithoutProperties(props,_excluded);return/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(routeProps){return!isAuthenticated&&!loading?/*#__PURE__*/ // navigate('/login')  \nReact.createElement(Redirect,{to:\"/login\"}):/*#__PURE__*/React.createElement(Component,routeProps);}}));};var mapStateToProps=function mapStateToProps(state){return{auth:state.auth};};export default connect(mapStateToProps)(PrivateRoute);// const PrivateRoute: React.FC<RouteComponentProps<RouteProps>> = ({ \n// \tcomponent: Component, \n// \tauth: { isAuthenticated, loading },\n// \tpath, \n// \t...rest \n// \t}) => (\n// \t<Route \n// \t{...rest} \n// \t\trender={props => \n// \t\t!isAuthenticated && !loading ? (  \n// \t\t<Redirect to='/login' />\n// \t\t) : (\n// \t\t<Component {...props} />\n// \t\t)\t\n// \t}\n// \t/>\n// );\n// const mapStateToProps = state => ({\n// \tauth: state.auth\n// });\n// export default connect(mapStateToProps)(PrivateRoute);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/routing/PrivateRoute.tsx"],"names":["React","Route","Redirect","connect","PrivateRoute","props","Component","component","auth","isAuthenticated","loading","path","rest","routeProps","mapStateToProps","state"],"mappings":"kPAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,KAAT,CAA4BC,QAA5B,KAA4C,kBAA5C,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA;AASC,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAEC,KAAF,CAAgC,CAErD,GAAmBC,CAAAA,SAAnB,CAAoFD,KAApF,CAAQE,SAAR,aAAoFF,KAApF,CAA8BG,IAA9B,CAAsCC,eAAtC,aAAsCA,eAAtC,CAAuDC,OAAvD,aAAuDA,OAAvD,CAAkEC,IAAlE,CAAoFN,KAApF,CAAkEM,IAAlE,CAA2EC,IAA3E,0BAAoFP,KAApF,YAEA,mBACA,oBAAC,KAAD,kBACIO,IADJ,EAEC,MAAM,CAAE,gBAAAC,UAAU,QAClB,CAACJ,eAAD,EAAoB,CAACC,OAArB,eACG;AACH,oBAAC,QAAD,EAAU,EAAE,CAAC,QAAb,EAFA,cAIA,oBAAC,SAAD,CAAeG,UAAf,CALkB,EAFnB,GADA,CAaA,CAjBA,CAmBD,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CACjCP,IAAI,CAAEO,KAAK,CAACP,IADqB,CAAL,EAA7B,CAIA,cAAeL,CAAAA,OAAO,CAACW,eAAD,CAAP,CAAyBV,YAAzB,CAAf,CAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\n\nimport { Route, RouteProps, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\n\n// type RouteProps = {\n\tinterface PrivateRouteProps extends RouteProps {\n\tauth: {\n\t\tisAuthenticated: boolean,\n\t\tloading: boolean,\n\t}\n\tpath?: string,\n\tcomponent: React.ComponentType<any>;\n\t// Component: React.ComponentType<any>;\n};\n\n\tconst PrivateRoute = ( props: PrivateRouteProps ) => {\n\t\n\tconst { component: Component, auth: { isAuthenticated, loading }, path, ...rest } = props; \n\n\treturn (\n\t<Route \n\t{...rest} \n\t\trender={routeProps => \n\t\t!isAuthenticated && !loading ? (  \n    \t// navigate('/login')  \n\t\t<Redirect to='/login' />\n\t\t) : (\n\t\t<Component {...routeProps} />\n\t\t)\t\n\t}\n\t/>\n\t);\n}\n\nconst mapStateToProps = state => ({\n\tauth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n\n\n\n// const PrivateRoute: React.FC<RouteComponentProps<RouteProps>> = ({ \n\n// \tcomponent: Component, \n// \tauth: { isAuthenticated, loading },\n// \tpath, \n// \t...rest \n// \t}) => (\n\n// \t<Route \n// \t{...rest} \n// \t\trender={props => \n// \t\t!isAuthenticated && !loading ? (  \n// \t\t<Redirect to='/login' />\n// \t\t) : (\n// \t\t<Component {...props} />\n// \t\t)\t\n// \t}\n// \t/>\n// );\n\n// const mapStateToProps = state => ({\n// \tauth: state.auth\n// });\n\n// export default connect(mapStateToProps)(PrivateRoute);"]},"metadata":{},"sourceType":"module"}