{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/user-dashboard/Dashboard-Tickets.tsx\";\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport Ticket from '../ticket/Ticket';\nimport '../../App.css';\nimport './Dashboard.css';\n\nconst DashboardTickets = _ref => {\n  let {\n    user,\n    film\n  } = _ref;\n  const {\n    tickets,\n    loading\n  } = user;\n  return user && tickets && film === null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 41\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, user.tickets.length === 0 ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"films-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 15\n    }\n  }, \"You haven't bought any tickets yet\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"films-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Search films\"))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"your-tickets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, tickets.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"singleTicket\",\n    key: item._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Ticket, {\n    ticket: item,\n    film: film,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 14\n    }\n  }))))));\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  //this is coming through as null\n  film: state.film.film.filmtime\n});\n\nexport default connect(mapStateToProps)(DashboardTickets);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/user-dashboard/Dashboard-Tickets.tsx"],"names":["React","Fragment","connect","Link","Spinner","Ticket","DashboardTickets","user","film","tickets","loading","length","map","item","_id","mapStateToProps","state","auth","filmtime"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,eAAP;AACA,OAAO,iBAAP;;AAOA,MAAMC,gBAA4C,GAAG,QAAoB;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;AAEvE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBH,IAA7B;AACA,SACGA,IAAI,IAAIE,OAAR,IAAmBD,IAAI,KAAK,IAA5B,gBAAmC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,gBACG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCD,IAAI,CAACE,OAAL,CAAaE,MAAb,KAAwB,CAAxB,gBAEA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADL,eAEC,oBAAC,IAAD;AAAO,IAAA,EAAE,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAFD,CAFA,gBAUD,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCF,OAAO,CAACG,GAAR,CAAYC,IAAI,iBACZ;AACA,IAAA,SAAS,EAAC,cADV;AAEA,IAAA,GAAG,EAAEA,IAAI,CAACC,GAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA,oBAAC,MAAD;AACE,IAAA,MAAM,EAAED,IADV;AAEE,IAAA,IAAI,EAAEL,IAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CADJ,CADD,CAFA,CAXA,CAFN;AAkCC,CArCH;;AAuCA,MAAMO,eAAe,GAAGC,KAAK,KAAK;AAChCT,EAAAA,IAAI,EAAES,KAAK,CAACC,IAAN,CAAWV,IADe;AAEhC;AACAC,EAAAA,IAAI,EAAEQ,KAAK,CAACR,IAAN,CAAWA,IAAX,CAAgBU;AAHU,CAAL,CAA7B;;AAOA,eAAehB,OAAO,CAACa,eAAD,CAAP,CAAyBT,gBAAzB,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport Ticket from '../ticket/Ticket';\nimport { userType, ticketType } from '../../utils/componentTypes';\nimport '../../App.css';\nimport './Dashboard.css'; \n\ninterface DashTicketsProps {\n    user: userType;\n    film: number;\n}\n\nconst DashboardTickets: React.FC<DashTicketsProps> = ({ user, film }) => {\n  \n  const { tickets, loading } = user\n  return (\n     user && tickets && film === null ? <Spinner /> : \n        <Fragment>\n        {user.tickets.length === 0 ? \n          (\n         <Fragment >  \n              <p className='films-link'>You haven't bought any tickets yet</p>\n          <Link  to=\"/\">\n            <p className=\"films-link\">Search films</p> \n          </Link>\n      \n          </Fragment>\n          ) : (   \n        <Fragment>\n        \n        <div className='your-tickets'>\n        {tickets.map(item => (         \n             <div \n             className=\"singleTicket\"\n             key={item._id}>\n             <Ticket\n               ticket={item}\n               film={film}\n             />\n             </div> \n        ))}\n        </div> \n      \n        </Fragment>\n         )\n       }    \n      </Fragment>\n    )\n\n  }  \n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  //this is coming through as null\n  film: state.film.film.filmtime,\n\n});\n\nexport default connect(mapStateToProps)(DashboardTickets); "]},"metadata":{},"sourceType":"module"}