{"ast":null,"code":"import { ActionType } from '../actions/types'; // import {\n//   GET_FILM,\n//   UPDATE_FILM,\n//   GET_FILMS,\n//   FILM_ERROR,\n//   CLEAR_FILM\n// } from '../actions/types';\n\n;\nconst initialState = {\n  film: null,\n  films: [],\n  loading: true,\n  error: {}\n};\n\nconst filmReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // export default function(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (action) {\n    case ActionType.GET_FILM:\n      return { ...state,\n        film: payload,\n        loading: false\n      };\n\n    case ActionType.GET_FILMS:\n      return { ...state,\n        films: payload,\n        loading: false\n      };\n\n    case ActionType.UPDATE_FILM:\n      return { ...state,\n        film: payload,\n        loading: false\n      };\n\n    case ActionType.FILM_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n    //this needed?\n\n    case ActionType.CLEAR_FILM:\n      return { ...state,\n        film: null,\n        films: [],\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filmReducer;","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/reducers/film.tsx"],"names":["ActionType","initialState","film","films","loading","error","filmReducer","state","action","type","payload","GET_FILM","GET_FILMS","UPDATE_FILM","FILM_ERROR","CLEAR_FILM"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYC;AAED,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;;AAOA,MAAMC,WAAW,GAAG,YASM;AAAA,MAPxBC,KAOwB,uEAPGN,YAOH;AAAA,MANxBO,MAMwB;AACxB;AACO,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACD,UAAQA,MAAR;AACE,SAAKR,UAAU,CAACW,QAAhB;AACA,aAAO,EACL,GAAGJ,KADE;AAELL,QAAAA,IAAI,EAAEQ,OAFD;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKA,SAAKJ,UAAU,CAACY,SAAhB;AACA,aAAO,EACL,GAAGL,KADE;AAELJ,QAAAA,KAAK,EAAEO,OAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKA,SAAKJ,UAAU,CAACa,WAAhB;AACA,aAAO,EACL,GAAGN,KADE;AAELL,QAAAA,IAAI,EAAEQ,OAFD;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKA,SAAKJ,UAAU,CAACc,UAAhB;AACA,aAAO,EACL,GAAGP,KADE;AAELF,QAAAA,KAAK,EAAEK,OAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;AAKA;;AACA,SAAKJ,UAAU,CAACe,UAAhB;AACA,aAAO,EACL,GAAGR,KADE;AAELL,QAAAA,IAAI,EAAE,IAFD;AAGLC,QAAAA,KAAK,EAAE,EAHF;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMA;AACE,aAAOG,KAAP;AAlCJ;AAoCL,CAhDH;;AAkDE,eAAeD,WAAf","sourcesContent":["import { ActionType } from '../actions/types';\n\n// import {\n//   GET_FILM,\n//   UPDATE_FILM,\n//   GET_FILMS,\n//   FILM_ERROR,\n//   CLEAR_FILM\n// } from '../actions/types';\n\n\ninterface RepositoriesState {\n  film: {} | null;\n  films: string[];\n  loading: boolean;\n  error: any; \n  // { \n  //   msg: string,\n  //   status: string,\n  // } | null\n};\n\nconst initialState = {\n  film: null,\n  films: [],\n  loading: true,\n  error: {}\n};\n\nconst filmReducer = (\n// export default function = (\n  state: RepositoriesState = initialState,\n  action: \n  // | GetFilm \n  | GetFilms \n  // | UpdateFilm \n  | FilmError \n  // | ClearFilm\n  ): RepositoriesState => {\n  // export default function(state = initialState, action) {\n         const { type, payload } = action \n        switch (action) {\n          case ActionType.GET_FILM:\n          return {\n            ...state,\n            film: payload,\n            loading: false \n          };\n          case ActionType.GET_FILMS:\n          return {\n            ...state,\n            films: payload,\n            loading: false \n          };\n          case ActionType.UPDATE_FILM:\n          return {\n            ...state,\n            film: payload,\n            loading: false \n          }; \n          case ActionType.FILM_ERROR:\n          return {\n            ...state,\n            error: payload,\n            loading: false\n          }; \n          //this needed?\n          case ActionType.CLEAR_FILM:\n          return {\n            ...state,\n            film: null,\n            films: [],\n            loading: false\n          };\n          default:\n            return state\n        }\n  }\n\n  export default filmReducer;"]},"metadata":{},"sourceType":"module"}