{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = _Error;\n/**\n * Generic Error klass to wrap any errors returned by stripe-node\n */\n\nfunction _Error(raw) {\n  this.populate.apply(this, arguments);\n  this.stack = new Error(this.message).stack;\n} // Extend Native Error\n\n\n_Error.prototype = Object.create(Error.prototype);\n_Error.prototype.type = 'GenericError';\n\n_Error.prototype.populate = function (type, message) {\n  this.type = type;\n  this.message = message;\n};\n\n_Error.extend = utils.protoExtend;\n/**\n * Create subclass of internal Error klass\n * (Specifically for errors returned from Stripe's REST API)\n */\n\nvar StripeError = _Error.StripeError = _Error.extend({\n  type: 'StripeError',\n  populate: function (raw) {\n    // Move from prototype def (so it appears in stringified obj)\n    this.type = this.type;\n    this.stack = new Error(raw.message).stack;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.message = raw.message;\n    this.detail = raw.detail;\n    this.raw = raw;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n  }\n});\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\n\n\nStripeError.generate = function (rawStripeError) {\n  switch (rawStripeError.type) {\n    case 'card_error':\n      return new _Error.StripeCardError(rawStripeError);\n\n    case 'invalid_request_error':\n      return new _Error.StripeInvalidRequestError(rawStripeError);\n\n    case 'api_error':\n      return new _Error.StripeAPIError(rawStripeError);\n\n    case 'idempotency_error':\n      return new _Error.StripeIdempotencyError(rawStripeError);\n  }\n\n  return new _Error('Generic', 'Unknown Error');\n}; // Specific Stripe Error types:\n\n\n_Error.StripeCardError = StripeError.extend({\n  type: 'StripeCardError'\n});\n_Error.StripeInvalidRequestError = StripeError.extend({\n  type: 'StripeInvalidRequestError'\n});\n_Error.StripeAPIError = StripeError.extend({\n  type: 'StripeAPIError'\n});\n_Error.StripeAuthenticationError = StripeError.extend({\n  type: 'StripeAuthenticationError'\n});\n_Error.StripePermissionError = StripeError.extend({\n  type: 'StripePermissionError'\n});\n_Error.StripeRateLimitError = StripeError.extend({\n  type: 'StripeRateLimitError'\n});\n_Error.StripeConnectionError = StripeError.extend({\n  type: 'StripeConnectionError'\n});\n_Error.StripeSignatureVerificationError = StripeError.extend({\n  type: 'StripeSignatureVerificationError'\n});\n_Error.StripeIdempotencyError = StripeError.extend({\n  type: 'StripeIdempotencyError'\n});","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/Error.js"],"names":["utils","require","module","exports","_Error","raw","populate","apply","arguments","stack","Error","message","prototype","Object","create","type","extend","protoExtend","StripeError","rawType","code","param","detail","headers","requestId","statusCode","generate","rawStripeError","StripeCardError","StripeInvalidRequestError","StripeAPIError","StripeIdempotencyError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeConnectionError","StripeSignatureVerificationError"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;AACA;AACA;;AACA,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,OAAKC,QAAL,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACA,OAAKC,KAAL,GAAc,IAAIC,KAAJ,CAAU,KAAKC,OAAf,CAAD,CAA0BF,KAAvC;AACD,C,CAED;;;AACAL,MAAM,CAACQ,SAAP,GAAmBC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACE,SAApB,CAAnB;AAEAR,MAAM,CAACQ,SAAP,CAAiBG,IAAjB,GAAwB,cAAxB;;AACAX,MAAM,CAACQ,SAAP,CAAiBN,QAAjB,GAA4B,UAASS,IAAT,EAAeJ,OAAf,EAAwB;AAClD,OAAKI,IAAL,GAAYA,IAAZ;AACA,OAAKJ,OAAL,GAAeA,OAAf;AACD,CAHD;;AAKAP,MAAM,CAACY,MAAP,GAAgBhB,KAAK,CAACiB,WAAtB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAGd,MAAM,CAACc,WAAP,GAAqBd,MAAM,CAACY,MAAP,CAAc;AACnDD,EAAAA,IAAI,EAAE,aAD6C;AAEnDT,EAAAA,QAAQ,EAAE,UAASD,GAAT,EAAc;AACtB;AACA,SAAKU,IAAL,GAAY,KAAKA,IAAjB;AAEA,SAAKN,KAAL,GAAc,IAAIC,KAAJ,CAAUL,GAAG,CAACM,OAAd,CAAD,CAAyBF,KAAtC;AACA,SAAKU,OAAL,GAAed,GAAG,CAACU,IAAnB;AACA,SAAKK,IAAL,GAAYf,GAAG,CAACe,IAAhB;AACA,SAAKC,KAAL,GAAahB,GAAG,CAACgB,KAAjB;AACA,SAAKV,OAAL,GAAeN,GAAG,CAACM,OAAnB;AACA,SAAKW,MAAL,GAAcjB,GAAG,CAACiB,MAAlB;AACA,SAAKjB,GAAL,GAAWA,GAAX;AACA,SAAKkB,OAAL,GAAelB,GAAG,CAACkB,OAAnB;AACA,SAAKC,SAAL,GAAiBnB,GAAG,CAACmB,SAArB;AACA,SAAKC,UAAL,GAAkBpB,GAAG,CAACoB,UAAtB;AACD;AAhBkD,CAAd,CAAvC;AAmBA;AACA;AACA;;;AACAP,WAAW,CAACQ,QAAZ,GAAuB,UAASC,cAAT,EAAyB;AAC9C,UAAQA,cAAc,CAACZ,IAAvB;AACA,SAAK,YAAL;AACE,aAAO,IAAIX,MAAM,CAACwB,eAAX,CAA2BD,cAA3B,CAAP;;AACF,SAAK,uBAAL;AACE,aAAO,IAAIvB,MAAM,CAACyB,yBAAX,CAAqCF,cAArC,CAAP;;AACF,SAAK,WAAL;AACE,aAAO,IAAIvB,MAAM,CAAC0B,cAAX,CAA0BH,cAA1B,CAAP;;AACF,SAAK,mBAAL;AACE,aAAO,IAAIvB,MAAM,CAAC2B,sBAAX,CAAkCJ,cAAlC,CAAP;AARF;;AAUA,SAAO,IAAIvB,MAAJ,CAAW,SAAX,EAAsB,eAAtB,CAAP;AACD,CAZD,C,CAcA;;;AACAA,MAAM,CAACwB,eAAP,GAAyBV,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAAzB;AACAX,MAAM,CAACyB,yBAAP,GAAmCX,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAAnC;AACAX,MAAM,CAAC0B,cAAP,GAAwBZ,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAAxB;AACAX,MAAM,CAAC4B,yBAAP,GAAmCd,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAAnC;AACAX,MAAM,CAAC6B,qBAAP,GAA+Bf,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAA/B;AACAX,MAAM,CAAC8B,oBAAP,GAA8BhB,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAA9B;AACAX,MAAM,CAAC+B,qBAAP,GAA+BjB,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAA/B;AACAX,MAAM,CAACgC,gCAAP,GAA0ClB,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAA1C;AACAX,MAAM,CAAC2B,sBAAP,GAAgCb,WAAW,CAACF,MAAZ,CAAmB;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAnB,CAAhC","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = _Error;\n\n/**\n * Generic Error klass to wrap any errors returned by stripe-node\n */\nfunction _Error(raw) {\n  this.populate.apply(this, arguments);\n  this.stack = (new Error(this.message)).stack;\n}\n\n// Extend Native Error\n_Error.prototype = Object.create(Error.prototype);\n\n_Error.prototype.type = 'GenericError';\n_Error.prototype.populate = function(type, message) {\n  this.type = type;\n  this.message = message;\n};\n\n_Error.extend = utils.protoExtend;\n\n/**\n * Create subclass of internal Error klass\n * (Specifically for errors returned from Stripe's REST API)\n */\nvar StripeError = _Error.StripeError = _Error.extend({\n  type: 'StripeError',\n  populate: function(raw) {\n    // Move from prototype def (so it appears in stringified obj)\n    this.type = this.type;\n\n    this.stack = (new Error(raw.message)).stack;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.message = raw.message;\n    this.detail = raw.detail;\n    this.raw = raw;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n  },\n});\n\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\nStripeError.generate = function(rawStripeError) {\n  switch (rawStripeError.type) {\n  case 'card_error':\n    return new _Error.StripeCardError(rawStripeError);\n  case 'invalid_request_error':\n    return new _Error.StripeInvalidRequestError(rawStripeError);\n  case 'api_error':\n    return new _Error.StripeAPIError(rawStripeError);\n  case 'idempotency_error':\n    return new _Error.StripeIdempotencyError(rawStripeError);\n  }\n  return new _Error('Generic', 'Unknown Error');\n};\n\n// Specific Stripe Error types:\n_Error.StripeCardError = StripeError.extend({type: 'StripeCardError'});\n_Error.StripeInvalidRequestError = StripeError.extend({type: 'StripeInvalidRequestError'});\n_Error.StripeAPIError = StripeError.extend({type: 'StripeAPIError'});\n_Error.StripeAuthenticationError = StripeError.extend({type: 'StripeAuthenticationError'});\n_Error.StripePermissionError = StripeError.extend({type: 'StripePermissionError'});\n_Error.StripeRateLimitError = StripeError.extend({type: 'StripeRateLimitError'});\n_Error.StripeConnectionError = StripeError.extend({type: 'StripeConnectionError'});\n_Error.StripeSignatureVerificationError = StripeError.extend({type: 'StripeSignatureVerificationError'});\n_Error.StripeIdempotencyError = StripeError.extend({type: 'StripeIdempotencyError'});\n"]},"metadata":{},"sourceType":"script"}