{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport auth from './auth';\n;\n;\n;\n;\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth', 'film']\n};\nconst rootReducer = combineReducers({\n  auth,\n  film // filmReducer\n\n});\nexport default persistReducer(persistConfig, rootReducer); // where does this go to?  \n// export default combineReducers({\n// \talert,\n// \tauth,\n// \tfilm,\n// \tprofile\n// });\n// import { combineReducers } from 'redux';\n// import repositoriesReducer from './repositoriesReducer';\n// const reducers = combineReducers({\n//   repositories: repositoriesReducer,\n// });\n// export default reducers;\n// export type RootState = ReturnType<typeof reducers>;","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/reducers/index.ts"],"names":["combineReducers","persistReducer","storage","auth","persistConfig","key","whitelist","rootReducer","film"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAWC;AAKA;AAKA;AAKA;AAWD,MAAMC,aAAa,GAAG;AACrBC,EAAAA,GAAG,EAAE,MADgB;AAErBH,EAAAA,OAFqB;AAGrBI,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,MAAT;AAHU,CAAtB;AAOA,MAAMC,WAAW,GAAGP,eAAe,CAAC;AACnCG,EAAAA,IADmC;AAEnCK,EAAAA,IAFmC,CAGnC;;AAHmC,CAAD,CAAnC;AAMA,eAAeP,cAAc,CAACG,aAAD,EAAgBG,WAAhB,CAA7B,C,CAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA","sourcesContent":["import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport { ActionType } from '../actions/types';\nimport storage from 'redux-persist/lib/storage';\nimport auth from './auth';\nimport filmReducer from './film';\n\ninterface GetFilm {\n  type: ActionType.GET_FILM;\n  payload: string[];\n}\n\ninterface GetFilms {\n  type: ActionType.GET_FILMS;\n  payload: string[];\n};\n\ninterface UpdateFilm {\n  type: ActionType.UPDATE_FILM;\n  payload: null;\n};\n\ninterface FilmError {\n  type: ActionType.FILM_ERROR;\n  payload: string[];\n};\n\ninterface ClearFilm {\n  type: ActionType.CLEAR_FILM;\n  payload: null;\n};\n\nexport type Action =\n  | GetFilm\n  | GetFilms\n  | UpdateFilm\n  | ClearFilm\n  | FilmError;\n\n\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage,\n\twhitelist: ['auth', 'film']\n\n}\n\nconst rootReducer = combineReducers({\n\tauth,\n\tfilm,\n\t// filmReducer\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n// where does this go to?  \n\n\n// export default combineReducers({\n// \talert,\n// \tauth,\n// \tfilm,\n// \tprofile\n// });\n\n// import { combineReducers } from 'redux';\n// import repositoriesReducer from './repositoriesReducer';\n\n// const reducers = combineReducers({\n//   repositories: repositoriesReducer,\n// });\n\n// export default reducers;\n\n// export type RootState = ReturnType<typeof reducers>;\n"]},"metadata":{},"sourceType":"module"}