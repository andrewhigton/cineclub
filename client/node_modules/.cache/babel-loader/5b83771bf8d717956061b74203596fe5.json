{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx\";\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film'; // import { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    price\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  let currentUser = 'bob';\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:5000/api/film/payment');\n      const clientSecret = response.data;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n      console.log('call1', paymentResult);\n\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('payment success');\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Credit Card Payment:\"), /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }\n  }, \"Pay Now\"))));\n};\n\nexport default StripeCheckoutButton;\n{\n  /*<form>\n  <CardElement />\n  <h2>Credit card payment</h2>\n  <button onSubmit={paymentHandler}>Pay Now</button>\n  </form>*/\n} // import React from 'react';\n// import { loadStripe } from '@stripe/stripe-js';\n// import { connect } from 'react-redux';\n// import { RouteComponentProps } from 'react-router-dom';\n// // import StripeCheckout from 'react-stripe-checkout';\n// import { ticketType, filmType } from '../componentTypes/componentTypes';\n// import { updateFilm } from '../../actions/film';\n// import { updateUserTickets } from '../../actions/auth';\n// import axios from 'axios';\n// interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n// type JointStripeProps = ChildComponentProps & StripeProps; \n// const StripeCheckoutButton: JointStripeProps = ({ \n// \t\tprice, \n// \t\tfilmData, \n// \t\tticketData, \n// \t\tupdateFilm, \n// \t  updateUserTickets,\n// \t\thistory, \n// \t\t// location \n// \t}) => {\n// \t\t\tconst priceForStripe = price * 100;\n// \t\t\t// const publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\t\t\t\n// \t\t\tconst onToken = token => {\n// \t\t\tif(isNaN(priceForStripe) || priceForStripe < 1) {\n// \t\t\t\talert('Please add tickets before submitting');\t\n// \t\t\t\treturn; \n// \t\t\t}\n// \t\t\taxios(\n// \t\t\t{ \n// \t\t\t\turl: '/api/film/payment', \n// \t\t\t\tmethod: 'post',\n// \t\t\t\tdata: {\n// \t\t\t\t\tamount: priceForStripe,\n// \t\t\t\t\ttoken: token\n// \t\t\t\t}\n// \t\t\t }, onPayment())\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log('resp is ' + response)\n// \t\t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n// \t\t\t \thistory.push('/film/dashboard');\n// \t\t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n// \t\t\t })\n// \t\t\t.catch(error => {\n// \t\t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n// \t\t\t\t// console.log('Payment error: ' + error); \t\n// \t\t\t \talert('Payment error. Please use the provided credit card details');\t\n// \t\t\t }) \n// \t} \n//   \tconst onPayment = () => {\n// \t    //prob need history in these two to complete\n// \t    //solve other problems first\n// \t    updateFilm(filmData);\n// \t    updateUserTickets(ticketData);\n//   \t};\n// \treturn (\n// \t\t<div \n// \t\tclassName='how-it-works stripe'>\n// \t\t<StripeCheckout\n// \t\tlabel='Pay now'\n// \t\tname='Saturday Cinema Club'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\tdescription={`Your total is Â£{price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t//move this out into own file\n// \t\tstyle={{'margin':'2vh 0vh 0vw -5vw'}}\n// \t\t/>\n// \t\t</div>\n// \t\t)\n// \t}\n// const mapStateToProps = state => ({\n//   film: state.film,\n//   auth: state.auth\n// });\n// export default connect(\n//   mapStateToProps, { \n//   updateFilm, \n//   updateUserTickets \n// })(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx"],"names":["React","useState","CardElement","useStripe","useElements","FormContainer","stripePayment","PaymentButton","PaymentFormContainer","axios","StripeCheckoutButton","price","stripe","elements","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","post","clientSecret","data","paymentResult","confirmCardPayment","payment_method","card","getElement","billing_details","name","console","log","paymentIntent","status","alert","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CACA;;AACA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,wBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,oBAAoB,GAAG,QAAa;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAE1C,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,MAAIU,WAAW,GAAG,KAAlB;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDf,QAAQ,CAAC,KAAD,CAA9D;;AAEA,QAAMgB,cAAc,GAAG,MAAOC,CAAP,IAAa;AAEnCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACP,MAAD,IAAW,CAACC,QAAf,EAAyB;AACxB;AACA;;AAED,QAAK;AACL,YAAMO,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAW,wCAAX,CAAvB;AAEC,YAAMC,YAAY,GAAGF,QAAQ,CAACG,IAA9B;AAEE,YAAMC,aAAa,GAAG,MAAMZ,MAAM,CAACa,kBAAP,CAA0BH,YAA1B,EAAwC;AAClEI,QAAAA,cAAc,EAAE;AACdC,UAAAA,IAAI,EAAEd,QAAQ,CAACe,UAAT,CAAoB1B,WAApB,CADQ;AAEd2B,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EAAE;AADS;AAFH;AADkD,OAAxC,CAA5B;AASAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,aAArB;;AAEA,UAAGA,aAAa,CAACS,aAAd,CAA4BC,MAA5B,KAAuC,WAA1C,EAAuD;AACtDC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;;AAEDnB,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AAED,KAtBF,CAsBG,OAAOoB,GAAP,EAAY;AACZD,MAAAA,KAAK,CAACC,GAAD,CAAL;AACF;AAED,GAjCD;;AAoCC,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEnB,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGC;AAAQ,IAAA,QAAQ,EAAEF,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHD,CADJ,CADD,CAFF;AAYA,CAvDD;;AAyDA,eAAeL,oBAAf;AAGG;AAAC;AACJ;AACA;AACA;AACA;AAAa,C,CAKb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film';\n// import { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport axios from 'axios';\n\n\nconst StripeCheckoutButton = ({price}) => {\n\nconst stripe = useStripe();\nconst elements = useElements();\nlet currentUser = 'bob';\nconst [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\nconst paymentHandler = async (e) => {\n  \t\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment') \n\t\n\t\tconst clientSecret = response.data;\n \n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    console.log('call1', paymentResult)\n\n    if(paymentResult.paymentIntent.status === 'succeeded') {\n    \talert('payment success');\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t  alert(err);\n\t}\n\n}\n\n\n\treturn (\n\n\t\t\t<div> \n\t\t\t\t<PaymentFormContainer>\n      \t\t<FormContainer onSubmit={paymentHandler}>\n\t        \t<h2>Credit Card Payment:</h2>\n\t        \t<CardElement />\n\t        <button disabled={isProcessingPayment}>Pay Now</button>\n\t      </FormContainer>\n    \t\t</PaymentFormContainer>\n\t\t\t</div>\n\t\t )\n}\n\nexport default StripeCheckoutButton;\n\n\n\t\t\t{/*<form>\n\t\t\t\t<CardElement />\n\t\t\t\t<h2>Credit card payment</h2>\n\t\t\t\t<button onSubmit={paymentHandler}>Pay Now</button>\n\t\t\t</form>*/}\n\n\n\n\n// import React from 'react';\n\n// import { loadStripe } from '@stripe/stripe-js';\n// import { connect } from 'react-redux';\n// import { RouteComponentProps } from 'react-router-dom';\n// // import StripeCheckout from 'react-stripe-checkout';\n// import { ticketType, filmType } from '../componentTypes/componentTypes';\n// import { updateFilm } from '../../actions/film';\n// import { updateUserTickets } from '../../actions/auth';\n// import axios from 'axios';\n\n// interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n\n// type JointStripeProps = ChildComponentProps & StripeProps; \n\n// const StripeCheckoutButton: JointStripeProps = ({ \n// \t\tprice, \n// \t\tfilmData, \n// \t\tticketData, \n// \t\tupdateFilm, \n// \t  updateUserTickets,\n// \t\thistory, \n// \t\t// location \n// \t}) => {\n\n\n// \t\t\tconst priceForStripe = price * 100;\n// \t\t\t// const publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\t\t\t\n\t\t\t\n// \t\t\tconst onToken = token => {\n// \t\t\tif(isNaN(priceForStripe) || priceForStripe < 1) {\n// \t\t\t\talert('Please add tickets before submitting');\t\n// \t\t\t\treturn; \n// \t\t\t}\n\n\t\t\t\n// \t\t\taxios(\n// \t\t\t{ \n// \t\t\t\turl: '/api/film/payment', \n// \t\t\t\tmethod: 'post',\n// \t\t\t\tdata: {\n// \t\t\t\t\tamount: priceForStripe,\n// \t\t\t\t\ttoken: token\n// \t\t\t\t}\n// \t\t\t }, onPayment())\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log('resp is ' + response)\n// \t\t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n// \t\t\t \thistory.push('/film/dashboard');\n// \t\t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n// \t\t\t })\n// \t\t\t.catch(error => {\n// \t\t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n// \t\t\t\t// console.log('Payment error: ' + error); \t\n// \t\t\t \talert('Payment error. Please use the provided credit card details');\t\n// \t\t\t }) \n// \t} \n\n//   \tconst onPayment = () => {\n// \t    //prob need history in these two to complete\n// \t    //solve other problems first\n// \t    updateFilm(filmData);\n// \t    updateUserTickets(ticketData);\n//   \t};\n\n// \treturn (\n// \t\t<div \n// \t\tclassName='how-it-works stripe'>\n// \t\t<StripeCheckout\n// \t\tlabel='Pay now'\n// \t\tname='Saturday Cinema Club'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\tdescription={`Your total is Â£{price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t//move this out into own file\n// \t\tstyle={{'margin':'2vh 0vh 0vw -5vw'}}\n// \t\t/>\n// \t\t</div>\n// \t\t)\n// \t}\n\n// const mapStateToProps = state => ({\n//   film: state.film,\n//   auth: state.auth\n// });\n\n// export default connect(\n//   mapStateToProps, { \n//   updateFilm, \n//   updateUserTickets \n// })(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}