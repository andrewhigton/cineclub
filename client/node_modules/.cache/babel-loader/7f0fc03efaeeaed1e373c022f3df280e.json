{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar stripeMethod = StripeResource.method;\nmodule.exports = StripeResource.extend({\n  path: 'charges',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'setMetadata', 'getMetadata'],\n  capture: stripeMethod({\n    method: 'POST',\n    path: '/{id}/capture',\n    urlParams: ['id']\n  }),\n  refund: stripeMethod({\n    method: 'POST',\n    path: '/{id}/refund',\n    urlParams: ['id']\n  }),\n  updateDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute',\n    urlParams: ['id']\n  }),\n  closeDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute/close',\n    urlParams: ['id']\n  }),\n\n  /**\n   * Charge: Refund methods\n   * (Deprecated)\n   */\n  createRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId']\n  }),\n  listRefunds: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId'],\n    methodType: 'list'\n  }),\n  retrieveRefund: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId']\n  }),\n  updateRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId']\n  }),\n  markAsSafe: function (chargeId) {\n    return this.update(chargeId, {\n      'fraud_details': {\n        'user_report': 'safe'\n      }\n    });\n  },\n  markAsFraudulent: function (chargeId) {\n    return this.update(chargeId, {\n      'fraud_details': {\n        'user_report': 'fraudulent'\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/resources/Charges.js"],"names":["StripeResource","require","stripeMethod","method","module","exports","extend","path","includeBasic","capture","urlParams","refund","updateDispute","closeDispute","createRefund","listRefunds","methodType","retrieveRefund","updateRefund","markAsSafe","chargeId","update","markAsFraudulent"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGF,cAAc,CAACG,MAAlC;AAEAC,MAAM,CAACC,OAAP,GAAiBL,cAAc,CAACM,MAAf,CAAsB;AAErCC,EAAAA,IAAI,EAAE,SAF+B;AAIrCC,EAAAA,YAAY,EAAE,CACZ,QADY,EACF,MADE,EACM,UADN,EACkB,QADlB,EAEZ,aAFY,EAEG,aAFH,CAJuB;AASrCC,EAAAA,OAAO,EAAEP,YAAY,CAAC;AACpBC,IAAAA,MAAM,EAAE,MADY;AAEpBI,IAAAA,IAAI,EAAE,eAFc;AAGpBG,IAAAA,SAAS,EAAE,CAAC,IAAD;AAHS,GAAD,CATgB;AAerCC,EAAAA,MAAM,EAAET,YAAY,CAAC;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBI,IAAAA,IAAI,EAAE,cAFa;AAGnBG,IAAAA,SAAS,EAAE,CAAC,IAAD;AAHQ,GAAD,CAfiB;AAqBrCE,EAAAA,aAAa,EAAEV,YAAY,CAAC;AAC1BC,IAAAA,MAAM,EAAE,MADkB;AAE1BI,IAAAA,IAAI,EAAE,eAFoB;AAG1BG,IAAAA,SAAS,EAAE,CAAC,IAAD;AAHe,GAAD,CArBU;AA2BrCG,EAAAA,YAAY,EAAEX,YAAY,CAAC;AACzBC,IAAAA,MAAM,EAAE,MADiB;AAEzBI,IAAAA,IAAI,EAAE,qBAFmB;AAGzBG,IAAAA,SAAS,EAAE,CAAC,IAAD;AAHc,GAAD,CA3BW;;AAiCrC;AACF;AACA;AACA;AACEI,EAAAA,YAAY,EAAEZ,YAAY,CAAC;AACzBC,IAAAA,MAAM,EAAE,MADiB;AAEzBI,IAAAA,IAAI,EAAE,qBAFmB;AAGzBG,IAAAA,SAAS,EAAE,CAAC,UAAD;AAHc,GAAD,CArCW;AA2CrCK,EAAAA,WAAW,EAAEb,YAAY,CAAC;AACxBC,IAAAA,MAAM,EAAE,KADgB;AAExBI,IAAAA,IAAI,EAAE,qBAFkB;AAGxBG,IAAAA,SAAS,EAAE,CAAC,UAAD,CAHa;AAIxBM,IAAAA,UAAU,EAAE;AAJY,GAAD,CA3CY;AAkDrCC,EAAAA,cAAc,EAAEf,YAAY,CAAC;AAC3BC,IAAAA,MAAM,EAAE,KADmB;AAE3BI,IAAAA,IAAI,EAAE,gCAFqB;AAG3BG,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,UAAb;AAHgB,GAAD,CAlDS;AAwDrCQ,EAAAA,YAAY,EAAEhB,YAAY,CAAC;AACzBC,IAAAA,MAAM,EAAE,MADiB;AAEzBI,IAAAA,IAAI,EAAE,gCAFmB;AAGzBG,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,UAAb;AAHc,GAAD,CAxDW;AA8DrCS,EAAAA,UAAU,EAAE,UAASC,QAAT,EAAmB;AAC7B,WAAO,KAAKC,MAAL,CAAYD,QAAZ,EAAsB;AAAC,uBAAiB;AAAC,uBAAe;AAAhB;AAAlB,KAAtB,CAAP;AACD,GAhEoC;AAkErCE,EAAAA,gBAAgB,EAAE,UAASF,QAAT,EAAmB;AACnC,WAAO,KAAKC,MAAL,CAAYD,QAAZ,EAAsB;AAAC,uBAAiB;AAAC,uBAAe;AAAhB;AAAlB,KAAtB,CAAP;AACD;AApEoC,CAAtB,CAAjB","sourcesContent":["'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'charges',\n\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update',\n    'setMetadata', 'getMetadata',\n  ],\n\n  capture: stripeMethod({\n    method: 'POST',\n    path: '/{id}/capture',\n    urlParams: ['id'],\n  }),\n\n  refund: stripeMethod({\n    method: 'POST',\n    path: '/{id}/refund',\n    urlParams: ['id'],\n  }),\n\n  updateDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute',\n    urlParams: ['id'],\n  }),\n\n  closeDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute/close',\n    urlParams: ['id'],\n  }),\n\n  /**\n   * Charge: Refund methods\n   * (Deprecated)\n   */\n  createRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId'],\n  }),\n\n  listRefunds: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId'],\n    methodType: 'list',\n  }),\n\n  retrieveRefund: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId'],\n  }),\n\n  updateRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId'],\n  }),\n\n  markAsSafe: function(chargeId) {\n    return this.update(chargeId, {'fraud_details': {'user_report': 'safe'}})\n  },\n\n  markAsFraudulent: function(chargeId) {\n    return this.update(chargeId, {'fraud_details': {'user_report': 'fraudulent'}})\n  },\n});\n"]},"metadata":{},"sourceType":"script"}