{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useStripe, useElements, CardNumberElement, CardCvcElement, CardExpiryElement } from '@stripe/react-stripe-js';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport Spinner from '../spinner/Spinner';\nimport '../checkout-film/checkoutfilm.css';\nimport axios from 'axios';\n\nconst ifValidCardElement = card => card === null;\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    filmData,\n    ticketData,\n    price,\n    updateUserTickets,\n    updateFilm,\n    history\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  let [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  useHistory = history;\n  ticketDataForDispatch = ticketData;\n  filmDataForDispatch = filmData;\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    isProcessingPayment = true;\n\n    try {\n      var _paymentResult$paymen;\n\n      const response = await axios.post('http://localhost:5000/api/film/payment', {\n        amount: price\n      });\n      const clientSecret = response.data;\n      const cardDetails = elements.getElement(CardNumberElement);\n      if (cardDetails === null) return;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n\n      if ((paymentResult === null || paymentResult === void 0 ? void 0 : (_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        updateUserTickets(ticketDataForDispatch);\n        updateFilm(filmDataForDispatch);\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      if (err instanceof Error) {\n        alert(err.message);\n      }\n    }\n  };\n\n  const inputStyle = {\n    fontWeight: '1000',\n    fontSize: '17px',\n    lineHeight: '35px'\n  };\n  return isProcessingPayment ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, \"Card Payment\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardNumberElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(CardExpiryElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(CardCvcElement, {\n    options: {\n      style: {\n        base: inputStyle\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"checkout-button\",\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 6\n    }\n  }, \"Pay Now\")));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n    updateFilm: () => dispatch(updateFilm(filmDataForDispatch))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx"],"names":["React","useState","connect","useStripe","useElements","CardNumberElement","CardCvcElement","CardExpiryElement","updateUserTickets","updateFilm","Spinner","axios","ifValidCardElement","card","useHistory","ticketDataForDispatch","filmDataForDispatch","StripeCheckoutButton","filmData","ticketData","price","history","stripe","elements","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","post","amount","clientSecret","data","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","paymentIntent","status","err","Error","alert","message","inputStyle","fontWeight","fontSize","lineHeight","style","base","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { Elements, \n\tCardElement, \n\tuseStripe, \n\tuseElements, \n\tCardNumberElement, \n\tCardCvcElement, \n\tCardExpiryElement  \n} from '@stripe/react-stripe-js';\nimport { StripeCardElement  } from '@stripe/stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport { ticketType, filmInterface, filmType } from '../../utils/componentTypes';\nimport Spinner from '../spinner/Spinner';\nimport '../checkout-film/checkoutfilm.css'\nimport axios from 'axios';\n\n\nconst ifValidCardElement = (card: StripeCardElement | null): card is StripeCardElement => card === null;  \n\n\ninterface TicketFilmTypes {\n\tfilmData: filmType;\n\tticketData: ticketType;\n\tprice: number;\n\tupdateUserTickets: (ticketDataForDispatch) => void; \n\tupdateFilm: (filmDataForDispatch) => void; \n\thistory;\n}\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton: React.FC<TicketFilmTypes> = ({\n\tfilmData, \n\tticketData, \n\tprice,\n\tupdateUserTickets,\n\tupdateFilm,\n\thistory\n\t}) => {\n\nconst stripe = useStripe();\nconst elements = useElements();\n\nlet [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\nuseHistory = history; \nticketDataForDispatch = ticketData;\nfilmDataForDispatch = filmData;\n\nconst paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\tisProcessingPayment = true;\n\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment', {\n  amount: price,\n\t}\n) \n\t\n\t\tconst clientSecret = response.data;\n\n\t\tconst cardDetails = elements.getElement(CardNumberElement)\n\t\t\n\n\t\tif(cardDetails === null) return;\n\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    if(paymentResult?.paymentIntent?.status === 'succeeded') {\n    \tupdateUserTickets(ticketDataForDispatch);\n\t\t\tupdateFilm(filmDataForDispatch); \n\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t  alert(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst inputStyle = {\n      fontWeight: '1000',\n      fontSize: '17px',\n      lineHeight: '35px'\n\t\t}\n\n\treturn isProcessingPayment ? (\n\t\t<Spinner />\n\t\t) : (\n\t\t\t<div className='checkout'>\n\t\t\t\t<h3>Card Payment</h3>\n\t\t\t\t<form onSubmit={paymentHandler}>\n\t\t\t\t\t<CardNumberElement \n\t\t\t\t\toptions={{\n   \t\t\t\t\tstyle: {\n     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t   },\n\t\t\t\t }}\n\t\t\t\t />\n\t\t\t\t\t<CardExpiryElement \n\t\t\t\t\t\toptions={{\n\t   \t\t\t\t\tstyle: {\n\t     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t\t   },\n\t\t\t\t\t }}\n\t\t\t\t\t/>\n\t\t\t\t\t<CardCvcElement \n\t\t\t\t\toptions={{\n   \t\t\t\t\tstyle: {\n     \t\t\t\t\tbase: inputStyle,\n\t\t\t\t\t   },\n\t\t\t\t\t }}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className='checkout-button' disabled={isProcessingPayment}>Pay Now</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t )\n\t}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n     updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n     updateFilm: () => dispatch(updateFilm(filmDataForDispatch)) \n  }\n}\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}