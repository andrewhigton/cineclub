{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport '../checkout-film/checkoutfilm.css';\nimport axios from 'axios';\n\nconst ifValidCardElement = card => card === null;\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    filmData,\n    ticketData,\n    price,\n    updateUserTickets,\n    updateFilm,\n    history\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  const CardNumberElement = elements.create('cardNumber');\n  const CardExpiryElement = elements.create('cardExpiry');\n  const CardCvcElement = elements.create('cardCvc');\n  CardNumberElement.mount('#card-number');\n  CardExpiryElement.mount('#card-expiry');\n  CardCvcElement.mount('#card-cvc');\n  let currentUser = 'bob';\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  useHistory = history;\n  ticketDataForDispatch = ticketData;\n  filmDataForDispatch = filmData;\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    try {\n      var _paymentResult$paymen;\n\n      const response = await axios.post('http://localhost:5000/api/film/payment');\n      const clientSecret = response.data;\n      const cardDetails = elements.getElement(CardElement); // if(!ifValidCardElement(cardDetails)) {\n      // \tconsole.log('failed1', cardDetails)\n      // \treturn;\t\n      // }\n\n      if (cardDetails === null) return;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n\n      if ((paymentResult === null || paymentResult === void 0 ? void 0 : (_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        alert('payment success');\n        updateUserTickets(ticketDataForDispatch);\n        updateFilm(filmDataForDispatch); // actionCreator()  \t\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      if (err instanceof Error) {\n        alert(err.message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentFormContainer, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Credit Card Payment:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"\",\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 10\n    }\n  }, \"Pay Now\"))));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n    updateFilm: () => dispatch(updateFilm(filmDataForDispatch))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton); // <div className=''> \n// \t\t<PaymentFormContainer className='formContainer'>\n//     \t\t<FormContainer onSubmit={paymentHandler}>\n//        \t<h3>Credit Card Payment:</h3>\n//        \t<div className='cardElement'>\n//        \t<CardElement />\n//        \t</div>\n//        <button className='stripe-button' disabled={isProcessingPayment}>Pay Now</button>\n//      </FormContainer>\n//   \t\t</PaymentFormContainer>\n// \t</div>","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx"],"names":["React","useState","connect","CardElement","useStripe","useElements","FormContainer","PaymentFormContainer","updateUserTickets","updateFilm","axios","ifValidCardElement","card","useHistory","ticketDataForDispatch","filmDataForDispatch","StripeCheckoutButton","filmData","ticketData","price","history","stripe","elements","CardNumberElement","create","CardExpiryElement","CardCvcElement","mount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","post","clientSecret","data","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","paymentIntent","status","alert","err","Error","message","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { CardElement, CardNumber, CardExpiry, useStripe, useElements,  } from '@stripe/react-stripe-js';\nimport { StripeCardElement  } from '@stripe/stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film';\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport { ticketType, filmInterface, filmType } from '../../utils/componentTypes';\nimport '../checkout-film/checkoutfilm.css'\nimport axios from 'axios';\n\n\nconst ifValidCardElement = (card: StripeCardElement | null): card is StripeCardElement => card === null;  \n\n\ninterface TicketFilmTypes {\n\tfilmData: filmType;\n\tticketData: ticketType;\n\tprice: number;\n\tupdateUserTickets: (ticketDataForDispatch) => void; \n\tupdateFilm: (filmDataForDispatch) => void; \n\thistory;\n}\n\n//global vars for dispatch \nlet useHistory;\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\nconst StripeCheckoutButton: React.FC<TicketFilmTypes> = ({\n\tfilmData, \n\tticketData, \n\tprice,\n\tupdateUserTickets,\n\tupdateFilm,\n\thistory\n\t}) => {\n\nconst stripe = useStripe();\nconst elements = useElements();\n\nconst CardNumberElement = elements.create('cardNumber')\nconst CardExpiryElement = elements.create('cardExpiry')\nconst CardCvcElement = elements.create('cardCvc')\n\nCardNumberElement.mount('#card-number');\nCardExpiryElement.mount('#card-expiry');\nCardCvcElement.mount('#card-cvc');\n\nlet currentUser = 'bob';\nconst [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\nuseHistory = history; \nticketDataForDispatch = ticketData;\nfilmDataForDispatch = filmData;\n\nconst paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment') \n\t\n\t\tconst clientSecret = response.data;\n\n\t\tconst cardDetails = elements.getElement(CardElement)\n\t\t// if(!ifValidCardElement(cardDetails)) {\n\t\t// \tconsole.log('failed1', cardDetails)\n\t\t// \treturn;\t\n\t\t// }\n\n\n\t\tif(cardDetails === null) return;\n\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    if(paymentResult?.paymentIntent?.status === 'succeeded') {\n    \talert('payment success');\n    \tupdateUserTickets(ticketDataForDispatch);\n\t\t\tupdateFilm(filmDataForDispatch);  \t\n    \t // actionCreator()  \t\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t  alert(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn (\n\t\t\t<div className='checkout-button'> \n\t\t\t\t<PaymentFormContainer className=''>\n      \t\t<FormContainer onSubmit={paymentHandler}>\n\t        \t<h4>Credit Card Payment:</h4>\n\t        \t<div className=''>\n\t        \t<CardElement />\n\t        \t\n\n\t        \t</div>\n\t        <button className='' disabled={isProcessingPayment}>Pay Now</button>\n\t      </FormContainer>\n    \t\t</PaymentFormContainer>\n\t\t\t</div>\n\t\t )\n\t}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n     updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch, useHistory)),\n     updateFilm: () => dispatch(updateFilm(filmDataForDispatch)) \n  }\n}\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);\n\n\n\t\t// <div className=''> \n\t\t// \t\t<PaymentFormContainer className='formContainer'>\n  //     \t\t<FormContainer onSubmit={paymentHandler}>\n\t //        \t<h3>Credit Card Payment:</h3>\n\t //        \t<div className='cardElement'>\n\t //        \t<CardElement />\n\t //        \t</div>\n\t //        <button className='stripe-button' disabled={isProcessingPayment}>Pay Now</button>\n\t //      </FormContainer>\n  //   \t\t</PaymentFormContainer>\n\t\t// \t</div>"]},"metadata":{},"sourceType":"module"}