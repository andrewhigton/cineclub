{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Add Tickets\n\nexport const updateUserTickets = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    history.push('/');\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    }\n  }\n}; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    alert('Please check your email and password');\n    dispatch({\n      type: ActionType.AUTH_ERROR,\n      payload: null\n    });\n  }\n}; // Register User\n\nexport const register = (name, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.REGISTER_FAIL,\n        payload: null\n      });\n    }\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    }\n  }\n};\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    }\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","updateUserTickets","formData","history","dispatch","config","headers","res","post","type","UPDATE_USER","payload","data","push","err","alert","LOGIN_FAIL","loadUser","localStorage","token","get","USER_LOADED","AUTH_ERROR","register","name","email","password","body","JSON","stringify","REGISTER_SUCCESS","REGISTER_FAIL","login","LOGIN_SUCCESS","deleteTickets","id","delete","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { ticketType } from '../utils/componentTypes';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Add Tickets\nexport const updateUserTickets = (formData: ticketType, history ) => async (dispatch: Dispatch<ActionUser>) => {\n  \n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    \n    const res = await axios.post('/api/users/ticket', formData, config);\n    \n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    history.push('/');\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n  }\n};\n\n\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser>) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  \n  \ntry {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    })\n\n} catch (err) {\n          alert('Please check your email and password')\n          dispatch({\n            type: ActionType.AUTH_ERROR,\n            payload: null\n        });\n      }\n  };\n\n\n// Register User\nexport const register = ( name: string, email: string, password: string ) => \n\nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  const body = JSON.stringify({ name, email, password });\n\n    try {\n    const res = await axios.post('/api/users', body, config);\n  \n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch<any>(loadUser());\n    \n\n    } catch (err) {\n    \n  \n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.REGISTER_FAIL,\n      payload: null\n    });\n    \n    }\n\n    \n  }\n};\n\n//Login User\nexport const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    dispatch<any>(loadUser());\n  } \n  catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n\n  }\n};\n\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }  \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}