{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar stripeMethod = StripeResource.method;\n\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n  path: 'invoices',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n  finalizeInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/finalize',\n    urlParams: ['invoiceId']\n  }),\n  markUncollectible: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/mark_uncollectible',\n    urlParams: ['invoiceId']\n  }),\n  pay: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/pay',\n    urlParams: ['invoiceId']\n  }),\n  retrieveLines: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId']\n  }),\n  retrieveUpcoming: stripeMethod({\n    method: 'GET',\n    path: function (urlData) {\n      var url = 'upcoming?customer=' + urlData.customerId; // Legacy support where second argument is the subscription id\n\n      if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'string') {\n        return url + '&subscription=' + urlData.invoiceOptions;\n      } else if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'object') {\n        return url + '&' + utils.stringifyRequestData(urlData.invoiceOptions);\n      }\n\n      return url;\n    },\n    urlParams: ['customerId', 'optional!invoiceOptions']\n  }),\n  sendInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/send',\n    urlParams: ['invoiceId']\n  }),\n  voidInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/void',\n    urlParams: ['invoiceId']\n  })\n});","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/resources/Invoices.js"],"names":["StripeResource","require","stripeMethod","method","utils","module","exports","extend","path","includeBasic","finalizeInvoice","urlParams","markUncollectible","pay","retrieveLines","retrieveUpcoming","urlData","url","customerId","invoiceOptions","stringifyRequestData","sendInvoice","voidInvoice"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGF,cAAc,CAACG,MAAlC;;AACA,IAAIC,KAAK,GAAGH,OAAO,CAAC,UAAD,CAAnB;;AAEAI,MAAM,CAACC,OAAP,GAAiBN,cAAc,CAACO,MAAf,CAAsB;AAErCC,EAAAA,IAAI,EAAE,UAF+B;AAGrCC,EAAAA,YAAY,EAAE,CAAC,QAAD,EAAW,MAAX,EAAmB,UAAnB,EAA+B,QAA/B,EAAyC,KAAzC,CAHuB;AAKrCC,EAAAA,eAAe,EAAER,YAAY,CAAC;AAC5BC,IAAAA,MAAM,EAAE,MADoB;AAE5BK,IAAAA,IAAI,EAAE,sBAFsB;AAG5BG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHiB,GAAD,CALQ;AAWrCC,EAAAA,iBAAiB,EAAEV,YAAY,CAAC;AAC9BC,IAAAA,MAAM,EAAE,MADsB;AAE9BK,IAAAA,IAAI,EAAE,gCAFwB;AAG9BG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHmB,GAAD,CAXM;AAiBrCE,EAAAA,GAAG,EAAEX,YAAY,CAAC;AAChBC,IAAAA,MAAM,EAAE,MADQ;AAEhBK,IAAAA,IAAI,EAAE,iBAFU;AAGhBG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHK,GAAD,CAjBoB;AAuBrCG,EAAAA,aAAa,EAAEZ,YAAY,CAAC;AAC1BC,IAAAA,MAAM,EAAE,KADkB;AAE1BK,IAAAA,IAAI,EAAE,mBAFoB;AAG1BG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHe,GAAD,CAvBU;AA6BrCI,EAAAA,gBAAgB,EAAEb,YAAY,CAAC;AAC7BC,IAAAA,MAAM,EAAE,KADqB;AAE7BK,IAAAA,IAAI,EAAE,UAASQ,OAAT,EAAkB;AACtB,UAAIC,GAAG,GAAG,uBAAuBD,OAAO,CAACE,UAAzC,CADsB,CAEtB;;AACA,UAAIF,OAAO,CAACG,cAAR,IAA0B,OAAOH,OAAO,CAACG,cAAf,KAAkC,QAAhE,EAA0E;AACxE,eAAOF,GAAG,GAAG,gBAAN,GAAyBD,OAAO,CAACG,cAAxC;AACD,OAFD,MAEO,IAAIH,OAAO,CAACG,cAAR,IAA0B,OAAOH,OAAO,CAACG,cAAf,KAAkC,QAAhE,EAA0E;AAC/E,eAAOF,GAAG,GAAG,GAAN,GAAYb,KAAK,CAACgB,oBAAN,CAA2BJ,OAAO,CAACG,cAAnC,CAAnB;AACD;;AACD,aAAOF,GAAP;AACD,KAX4B;AAY7BN,IAAAA,SAAS,EAAE,CAAC,YAAD,EAAe,yBAAf;AAZkB,GAAD,CA7BO;AA4CrCU,EAAAA,WAAW,EAAEnB,YAAY,CAAC;AACxBC,IAAAA,MAAM,EAAE,MADgB;AAExBK,IAAAA,IAAI,EAAE,kBAFkB;AAGxBG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHa,GAAD,CA5CY;AAkDrCW,EAAAA,WAAW,EAAEpB,YAAY,CAAC;AACxBC,IAAAA,MAAM,EAAE,MADgB;AAExBK,IAAAA,IAAI,EAAE,kBAFkB;AAGxBG,IAAAA,SAAS,EAAE,CAAC,WAAD;AAHa,GAAD;AAlDY,CAAtB,CAAjB","sourcesContent":["'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'invoices',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n\n  finalizeInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/finalize',\n    urlParams: ['invoiceId'],\n  }),\n\n  markUncollectible: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/mark_uncollectible',\n    urlParams: ['invoiceId'],\n  }),\n\n  pay: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/pay',\n    urlParams: ['invoiceId'],\n  }),\n\n  retrieveLines: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId'],\n  }),\n\n  retrieveUpcoming: stripeMethod({\n    method: 'GET',\n    path: function(urlData) {\n      var url = 'upcoming?customer=' + urlData.customerId;\n      // Legacy support where second argument is the subscription id\n      if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'string') {\n        return url + '&subscription=' + urlData.invoiceOptions;\n      } else if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'object') {\n        return url + '&' + utils.stringifyRequestData(urlData.invoiceOptions);\n      }\n      return url;\n    },\n    urlParams: ['customerId', 'optional!invoiceOptions'],\n  }),\n\n  sendInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/send',\n    urlParams: ['invoiceId'],\n  }),\n\n  voidInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/void',\n    urlParams: ['invoiceId'],\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}