{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx\";\nimport React from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film'; // import { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  let amount = 2;\n  let currentUser = 'bob';\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    } //not reacihn here. why\n\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/api/film\"\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {// Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    } // const response = stripePayment()\n    // await fetch('/api/film/payment', {\n    //     method: 'post',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify({ amount: amount * 100 }),\n    // }).then((res) => {\n    // console.log(res)\n    // return res.json();\n    // });\n    // console.log(response)\n    // const clientSecret = response.paymentIntent.client_secret;\n    // const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n    //   payment_method: {\n    //     card: elements.getElement(CardElement),\n    //     billing_details: {\n    //       name: currentUser ? 'Andrew Higton' : 'Andrew Higton',\n    //     },\n    //   },\n    // });\n    // // setIsProcessingPayment(false);\n    // if (paymentResult.error) {\n    //   alert(paymentResult.error.message);\n    // } else {\n    //   if (paymentResult.paymentIntent.status === 'succeeded') {\n    //     alert('Payment Successful!');\n    //   }\n    // }\t\t\t\n    // \t\taxios(\n    // \t\t{ \n    // \t\t\turl: '/api/film/payment', \n    // \t\t\tmethod: 'post',\n    // \t\t\tdata: {\n    // \t\t\t\tamount: priceForStripe,\n    // \t\t\t\ttoken: token\n    // \t\t\t}\n    // \t\t }, onPayment())\n    // \t\t.then(response => {\n    // \t\t\tconsole.log('resp is ' + response)\n    // \t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n    // \t\t \thistory.push('/film/dashboard');\n    // \t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n    // \t\t })\n    // \t\t.catch(error => {\n    // \t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n    // \t\t\t// console.log('Payment error: ' + error); \t\n    // \t\t \talert('Payment error. Please use the provided credit card details');\t\n    // \t\t }) \n    // } \n\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Credit Card Payment:\"), /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 10\n    }\n  }, \"Pay Now\"))));\n};\n\nexport default StripeCheckoutButton;\n{\n  /*<form>\n  <CardElement />\n  <h2>Credit card payment</h2>\n  <button onSubmit={paymentHandler}>Pay Now</button>\n  </form>*/\n} // import React from 'react';\n// import { loadStripe } from '@stripe/stripe-js';\n// import { connect } from 'react-redux';\n// import { RouteComponentProps } from 'react-router-dom';\n// // import StripeCheckout from 'react-stripe-checkout';\n// import { ticketType, filmType } from '../componentTypes/componentTypes';\n// import { updateFilm } from '../../actions/film';\n// import { updateUserTickets } from '../../actions/auth';\n// import axios from 'axios';\n// interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n// type JointStripeProps = ChildComponentProps & StripeProps; \n// const StripeCheckoutButton: JointStripeProps = ({ \n// \t\tprice, \n// \t\tfilmData, \n// \t\tticketData, \n// \t\tupdateFilm, \n// \t  updateUserTickets,\n// \t\thistory, \n// \t\t// location \n// \t}) => {\n// \t\t\tconst priceForStripe = price * 100;\n// \t\t\t// const publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\t\t\t\n// \t\t\tconst onToken = token => {\n// \t\t\tif(isNaN(priceForStripe) || priceForStripe < 1) {\n// \t\t\t\talert('Please add tickets before submitting');\t\n// \t\t\t\treturn; \n// \t\t\t}\n// \t\t\taxios(\n// \t\t\t{ \n// \t\t\t\turl: '/api/film/payment', \n// \t\t\t\tmethod: 'post',\n// \t\t\t\tdata: {\n// \t\t\t\t\tamount: priceForStripe,\n// \t\t\t\t\ttoken: token\n// \t\t\t\t}\n// \t\t\t }, onPayment())\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log('resp is ' + response)\n// \t\t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n// \t\t\t \thistory.push('/film/dashboard');\n// \t\t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n// \t\t\t })\n// \t\t\t.catch(error => {\n// \t\t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n// \t\t\t\t// console.log('Payment error: ' + error); \t\n// \t\t\t \talert('Payment error. Please use the provided credit card details');\t\n// \t\t\t }) \n// \t} \n//   \tconst onPayment = () => {\n// \t    //prob need history in these two to complete\n// \t    //solve other problems first\n// \t    updateFilm(filmData);\n// \t    updateUserTickets(ticketData);\n//   \t};\n// \treturn (\n// \t\t<div \n// \t\tclassName='how-it-works stripe'>\n// \t\t<StripeCheckout\n// \t\tlabel='Pay now'\n// \t\tname='Saturday Cinema Club'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\tdescription={`Your total is Â£{price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t//move this out into own file\n// \t\tstyle={{'margin':'2vh 0vh 0vw -5vw'}}\n// \t\t/>\n// \t\t</div>\n// \t\t)\n// \t}\n// const mapStateToProps = state => ({\n//   film: state.film,\n//   auth: state.auth\n// });\n// export default connect(\n//   mapStateToProps, { \n//   updateFilm, \n//   updateUserTickets \n// })(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx"],"names":["React","CardElement","useStripe","useElements","FormContainer","stripePayment","PaymentButton","PaymentFormContainer","axios","StripeCheckoutButton","stripe","elements","amount","currentUser","paymentHandler","e","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CACA;;AAEA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,wBAApD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,oBAAoB,GAAG,MAAM;AAEnC,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;AACA,MAAIS,MAAM,GAAG,CAAb;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,QAAMC,cAAc,GAAG,MAAOC,CAAP,IAAa;AAGnCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACN,MAAD,IAAW,CAACC,QAAf,EAAyB;AACxB;AACA,KANkC,CAOlC;;;AAGA,UAAMM,MAAM,GAAG,MAAMP,MAAM,CAACQ,cAAP,CAAsB;AACvC;AACAP,MAAAA,QAFuC;AAGvCQ,MAAAA,aAAa,EAAE;AACbC,QAAAA,UAAU,EAAE;AADC;AAHwB,KAAtB,CAArB;;AAQE,QAAIH,MAAM,CAACI,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO,CACL;AACA;AACA;AACD,KAzB+B,CA6BlC;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAEC;AACC;AACF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,GAvFD;;AAyFC,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEV,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHD,CADJ,CADD,CAFF;AAYA,CA5GD;;AA8GA,eAAeL,oBAAf;AAGG;AAAC;AACJ;AACA;AACA;AACA;AAAa,C,CAKb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film';\n// import { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\n\nimport axios from 'axios';\n\n\nconst StripeCheckoutButton = () => {\n\nconst stripe = useStripe();\nconst elements = useElements();\nlet amount = 2;\nlet currentUser = 'bob';\n\nconst paymentHandler = async (e) => {\n\t\n\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\t\t//not reacihn here. why\n\t\t\n\t\n\t\tconst result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/api/film\",\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n\n\n\n\t\t// const response = stripePayment()\n\t\t// await fetch('/api/film/payment', {\n  //     method: 'post',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({ amount: amount * 100 }),\n    // }).then((res) => {\n    \t\n    \t// console.log(res)\n      // return res.json();\n    // });\n    // console.log(response)\n    // const clientSecret = response.paymentIntent.client_secret;\n\n    // const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n    //   payment_method: {\n    //     card: elements.getElement(CardElement),\n    //     billing_details: {\n    //       name: currentUser ? 'Andrew Higton' : 'Andrew Higton',\n    //     },\n    //   },\n    // });\n\n    // // setIsProcessingPayment(false);\n\n    // if (paymentResult.error) {\n    //   alert(paymentResult.error.message);\n    // } else {\n    //   if (paymentResult.paymentIntent.status === 'succeeded') {\n    //     alert('Payment Successful!');\n    //   }\n    // }\t\t\t\n\n\n\t// \t\taxios(\n\t// \t\t{ \n\t// \t\t\turl: '/api/film/payment', \n\t// \t\t\tmethod: 'post',\n\t// \t\t\tdata: {\n\t// \t\t\t\tamount: priceForStripe,\n\t// \t\t\t\ttoken: token\n\t// \t\t\t}\n\t// \t\t }, onPayment())\n\t// \t\t.then(response => {\n\t// \t\t\tconsole.log('resp is ' + response)\n\t// \t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n\t// \t\t \thistory.push('/film/dashboard');\n\t// \t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n\t// \t\t })\n\t// \t\t.catch(error => {\n\t// \t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n\t// \t\t\t// console.log('Payment error: ' + error); \t\n\t// \t\t \talert('Payment error. Please use the provided credit card details');\t\n\t// \t\t }) \n\t// } \n\n\n}\n\n\treturn (\n\n\t\t\t<div> \n\t\t\t\t<PaymentFormContainer>\n      \t\t<FormContainer onSubmit={paymentHandler}>\n\t        \t<h2>Credit Card Payment:</h2>\n\t        \t<CardElement />\n\t        <button>Pay Now</button>\n\t      </FormContainer>\n    \t\t</PaymentFormContainer>\n\t\t\t</div>\n\t\t )\n}\n\nexport default StripeCheckoutButton;\n\n\n\t\t\t{/*<form>\n\t\t\t\t<CardElement />\n\t\t\t\t<h2>Credit card payment</h2>\n\t\t\t\t<button onSubmit={paymentHandler}>Pay Now</button>\n\t\t\t</form>*/}\n\n\n\n\n// import React from 'react';\n\n// import { loadStripe } from '@stripe/stripe-js';\n// import { connect } from 'react-redux';\n// import { RouteComponentProps } from 'react-router-dom';\n// // import StripeCheckout from 'react-stripe-checkout';\n// import { ticketType, filmType } from '../componentTypes/componentTypes';\n// import { updateFilm } from '../../actions/film';\n// import { updateUserTickets } from '../../actions/auth';\n// import axios from 'axios';\n\n// interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n\n// type JointStripeProps = ChildComponentProps & StripeProps; \n\n// const StripeCheckoutButton: JointStripeProps = ({ \n// \t\tprice, \n// \t\tfilmData, \n// \t\tticketData, \n// \t\tupdateFilm, \n// \t  updateUserTickets,\n// \t\thistory, \n// \t\t// location \n// \t}) => {\n\n\n// \t\t\tconst priceForStripe = price * 100;\n// \t\t\t// const publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\t\t\t\n\t\t\t\n// \t\t\tconst onToken = token => {\n// \t\t\tif(isNaN(priceForStripe) || priceForStripe < 1) {\n// \t\t\t\talert('Please add tickets before submitting');\t\n// \t\t\t\treturn; \n// \t\t\t}\n\n\t\t\t\n// \t\t\taxios(\n// \t\t\t{ \n// \t\t\t\turl: '/api/film/payment', \n// \t\t\t\tmethod: 'post',\n// \t\t\t\tdata: {\n// \t\t\t\t\tamount: priceForStripe,\n// \t\t\t\t\ttoken: token\n// \t\t\t\t}\n// \t\t\t }, onPayment())\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log('resp is ' + response)\n// \t\t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n// \t\t\t \thistory.push('/film/dashboard');\n// \t\t\t \t//window.location.replace('http://localhost:3000/film/dashboard');\n// \t\t\t })\n// \t\t\t.catch(error => {\n// \t\t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n// \t\t\t\t// console.log('Payment error: ' + error); \t\n// \t\t\t \talert('Payment error. Please use the provided credit card details');\t\n// \t\t\t }) \n// \t} \n\n//   \tconst onPayment = () => {\n// \t    //prob need history in these two to complete\n// \t    //solve other problems first\n// \t    updateFilm(filmData);\n// \t    updateUserTickets(ticketData);\n//   \t};\n\n// \treturn (\n// \t\t<div \n// \t\tclassName='how-it-works stripe'>\n// \t\t<StripeCheckout\n// \t\tlabel='Pay now'\n// \t\tname='Saturday Cinema Club'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\tdescription={`Your total is Â£{price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t//move this out into own file\n// \t\tstyle={{'margin':'2vh 0vh 0vw -5vw'}}\n// \t\t/>\n// \t\t</div>\n// \t\t)\n// \t}\n\n// const mapStateToProps = state => ({\n//   film: state.film,\n//   auth: state.auth\n// });\n\n// export default connect(\n//   mapStateToProps, { \n//   updateFilm, \n//   updateUserTickets \n// })(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}