{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  console.log('call');\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  } // console.log('call')\n\n\n  try {\n    const res = await axios.get('/api/auth'); // console.log(res.data)\n\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    // console.log('called1')\n    console.log(err);\n    dispatch({\n      type: ActionType.AUTH_ERROR,\n      payload: null\n    });\n  }\n}; // Register User\n\nexport const register = (name, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    console.log(res);\n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser()); // {\n    //   type: null,\n    //   payload: any,\n    // }\n    // );\n  } catch (err) {\n    // console.log(err)\n    // const errors = err.response.data.errors;\n    // if (err instanceof Error) {\n    // const errors = err.response.data.errors;\n    //   }\n    // if (errors) {\n    //   console.log(err)\n    //   alert(err)\n    // }\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.REGISTER_FAIL,\n        // type: ActionType.LOGOUT,\n        payload: null\n      }); //   dispatch({\n      //   type: ActionType.LOGIN_FAIL,\n      //   payload: null\n      // });\n    }\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config); // {\n    //   type: null,\n    //   payload: res.data,\n    // }))\n\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n    console.log('call1');\n    console.log(res.data); //this isn't disptaching\n    //why can I not call this?\n    //because it needs hte interface to match with types? but how to do this? \n\n    dispatch(loadUser()); //loadUser()\n  } catch (err) {\n    console.log('called');\n\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    } //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n\n  }\n}; // Add Tickets\n//here\n\nexport const updateUserTickets = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    }); //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      }); // const errors = err.response.data.errors;\n      // if (errors) {\n      //   console.log(errors)\n    }\n  }\n};\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    } // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","loadUser","dispatch","console","log","localStorage","token","res","get","type","USER_LOADED","payload","data","err","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","alert","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","updateUserTickets","formData","UPDATE_USER","deleteTickets","id","delete","logout","LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAIA,OAAOC,YAAP,MAAyB,uBAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAA0C;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBN,IAAAA,YAAY,CAACK,YAAY,CAACC,KAAd,CAAZ;AACD,GAJqE,CAKtE;;;AACA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,WAAV,CAAlB,CADE,CAED;;AACDN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAACW,WADV;AAEPC,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACAX,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAACe,UADV;AAEPH,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACF,CArBM,C,CA0BP;;AACA,OAAO,MAAMI,QAAQ,GAAG,CAAEC,IAAF,EAAgBC,KAAhB,EAA+BC,QAA/B,KAExB,MAAOhB,QAAP,IAA0C;AAExC,QAAMiB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAL,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAAC0B,gBADV;AAEPd,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAIAV,IAAAA,QAAQ,CAAMD,QAAQ,EAAd,CAAR,CAPE,CASF;AACA;AACA;AACA;AACA;AAGC,GAhBH,CAgBI,OAAOY,GAAP,EAAY;AACd;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,QAAIA,GAAJ,EAAS;AACPa,MAAAA,KAAK,CAACb,GAAD,CAAL;AACAX,MAAAA,QAAQ,CAAC;AACTO,QAAAA,IAAI,EAAEV,UAAU,CAAC4B,aADR;AAET;AACAhB,QAAAA,OAAO,EAAE;AAHA,OAAD,CAAR,CAFO,CAOT;AACA;AACA;AACA;AACC;AAGF;AACF,CAxDM,C,CA0DP;;AACA,OAAO,MAAMiB,KAAK,GAAG,CAACX,KAAD,EAAyBC,QAAzB,KAAuD,MAAOhB,QAAP,IAA0C;AACpH,QAAMiB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAEF,MAAI;AACA,UAAMX,GAAG,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB,CADA,CAGA;AACA;AACA;AACA;;AAEAjB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAAC8B,aADV;AAEPlB,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAIAT,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACK,IAAhB,EAbA,CAcA;AACA;AACA;;AACAV,IAAAA,QAAQ,CAAMD,QAAQ,EAAd,CAAR,CAjBA,CAkBA;AACD,GAnBH,CAoBE,OAAOY,GAAP,EAAY;AACVV,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAIS,GAAJ,EAAS;AACPa,MAAAA,KAAK,CAACb,GAAD,CAAL;AACAX,MAAAA,QAAQ,CAAC;AACTO,QAAAA,IAAI,EAAEV,UAAU,CAAC+B,UADR;AAETnB,QAAAA,OAAO,EAAE;AAFA,OAAD,CAAR;AAID,KARS,CASV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AAEF,CAhDM,C,CAkDP;AACA;;AACA,OAAO,MAAMoB,iBAAiB,GAAIC,QAAD,IACjC,MAAO9B,QAAP,IAA0C;AACxC,MAAI;AACF,UAAMiB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMb,GAAG,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAW,mBAAX,EAAgCQ,QAAhC,EAA0Cb,MAA1C,CAAlB;AACAjB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAACkC,WADV;AAEPtB,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR,CARE,CAYF;AACD,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZ,QAAIA,GAAJ,EAAS;AACPa,MAAAA,KAAK,CAACb,GAAD,CAAL;AACAX,MAAAA,QAAQ,CAAC;AACTO,QAAAA,IAAI,EAAEV,UAAU,CAAC+B,UADR;AAETnB,QAAAA,OAAO,EAAE;AAFA,OAAD,CAAR,CAFO,CAMT;AACA;AAEA;AACC;AACF;AACF,CA5BM;AA8BP,OAAO,MAAMuB,aAAa,GAAIC,EAAD,IAAgB,MAAMjC,QAAN,IAAkB;AAC7D,MAAI;AACF,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACsC,MAAN,CAAc,gBAAeD,EAAG,EAAhC,CAAlB;AAEAjC,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEV,UAAU,CAACkC,WADV;AAEPtB,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,QAAIA,GAAJ,EAAS;AACPa,MAAAA,KAAK,CAACb,GAAD,CAAL;AACAX,MAAAA,QAAQ,CAAC;AACTO,QAAAA,IAAI,EAAEV,UAAU,CAAC+B;AADR,OAAD,CAAR;AAGD,KANW,CAQZ;AACA;;AAED;AACF,CApBM,C,CAsBP;;AACA,OAAO,MAAMO,MAAM,GAAG,MAAMnC,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEV,UAAU,CAACuC;AAAnB,GAAD,CAAR;AACD,CAFM","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport setAuthToken from '../utils/setAuthToken';\n// import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\ninterface ChildComponentProps extends RouteComponentProps<any> {\n history: any;\n}\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser>) => {\n  console.log('call')\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  // console.log('call')\n  try {\n    const res = await axios.get('/api/auth');\n     // console.log(res.data)\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    // console.log('called1')\n    console.log(err)\n    dispatch({\n      type: ActionType.AUTH_ERROR,\n      payload: null\n    });\n  }\n};\n\n\n\n\n// Register User\nexport const register = ( name: string, email: string, password: string ) => \n\nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    console.log(res)  \n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch<any>(loadUser());\n\n    // {\n    //   type: null,\n    //   payload: any,\n    // }\n    // );\n    \n\n    } catch (err) {\n    // console.log(err)\n    // const errors = err.response.data.errors;\n    // if (err instanceof Error) {\n    // const errors = err.response.data.errors;\n    //   }\n\n    // if (errors) {\n    //   console.log(err)\n    //   alert(err)\n    // }\n\n\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.REGISTER_FAIL,\n      // type: ActionType.LOGOUT,\n      payload: null\n    });\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL,\n    //   payload: null\n    // });\n    }\n\n    \n  }\n};\n\n//Login User\nexport const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n  \ntry {\n    const res = await axios.post('/api/auth', body, config);\n    \n    // {\n    //   type: null,\n    //   payload: res.data,\n    // }))\n    \n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    console.log('call1')\n    console.log(res.data)\n    //this isn't disptaching\n    //why can I not call this?\n    //because it needs hte interface to match with types? but how to do this? \n    dispatch<any>(loadUser())\n    //loadUser()\n  } \n  catch (err) {\n    console.log('called')\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n    //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n  }\n\n};\n\n// Add Tickets\n//here\nexport const updateUserTickets = (formData) => \nasync (dispatch: Dispatch<ActionUser>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    // const errors = err.response.data.errors;\n    // if (errors) {\n     \n    //   console.log(errors)\n    }\n  }\n};\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }\n\n    // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n    \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}