{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\n// Get all Films\nexport const loadFilms = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null //payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; // Get film by ID\n\nexport const getFilmById = film_id => async dispatch => {\n  dispatch({\n    type: ActionType.CLEAR_FILM,\n    payload: null\n  });\n\n  try {\n    const res = await axios.get(`/api/film/${film_id}`); // .populate('film', ['title', 'cinema']);\n\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // create film\n// export const createFilm = ( formData: string, history needed? ) => async dispatch => {\n\nexport const createFilm = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/film/create-film', formData, config);\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // export const updateFilm = (formData, history needed?) => async dispatch => {\n\nexport const updateFilm = formData => async dispatch => {\n  dispatch({\n    type: ActionType.CLEAR_FILM,\n    payload: null\n  });\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: 'UPDATE_FILM',\n      payload: res.data\n    });\n    alert('Thanks for your booking', 'success');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/actions/film.tsx"],"names":["axios","ActionType","loadFilms","dispatch","res","get","type","GET_FILMS","payload","data","err","FILM_ERROR","getFilmById","film_id","CLEAR_FILM","GET_FILM","msg","response","statusText","status","createFilm","formData","history","config","headers","post","push","errors","alert","forEach","error","updateFilm","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionFilms } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\n// import { setAlert } from './alert';\n// import {\n//   GET_FILM,\n//   UPDATE_FILM,\n//   GET_FILMS,\n//   CLEAR_FILM,\n//   FILM_ERROR,\n//   // DELETE_FILM\n// } from './types';\n\ninterface formType {\n\n}\n\n// Get all Films\nexport const loadFilms = () => async (dispatch: Dispatch<ActionFilms>) => {\n  try {\n    const res = await axios.get('/api/film');\n\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null,\n      //payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n  };\n\n// Get film by ID\nexport const getFilmById = (film_id: string) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n   });\n  try {\n    const res = await axios.get(`/api/film/${film_id}`)\n    // .populate('film', ['title', 'cinema']);\n    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// create film\n// export const createFilm = ( formData: string, history needed? ) => async dispatch => {\n  export const createFilm = ( formData, history) => async (dispatch: Dispatch<ActionFilms>) => \n  {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  \n    const res = await axios.post('/api/film/create-film', formData, config);    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// export const updateFilm = (formData, history needed?) => async dispatch => {\nexport const updateFilm = (formData) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n     });\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: 'UPDATE_FILM',\n      payload: res.data\n      });\n    alert('Thanks for your booking', 'success');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };"]},"metadata":{},"sourceType":"module"}