{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar OPTIONAL_REGEX = /^optional!/;\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var commandPath = typeof spec.path == 'function' ? spec.path : utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n\n  var encode = spec.encode || function (data) {\n    return data;\n  };\n\n  var host = spec.host; // Don't mutate args externally.\n\n  var args = [].slice.call(requestArgs); // Generate and validate url params.\n\n  var urlData = self.createUrlData();\n\n  for (var i = 0, l = urlParams.length; i < l; ++i) {\n    var path; // Note that we shift the args array after every iteration so this just\n    // grabs the \"next\" argument for use as a URL parameter.\n\n    var arg = args[0];\n    var param = urlParams[i];\n    var isOptional = OPTIONAL_REGEX.test(param);\n    param = param.replace(OPTIONAL_REGEX, '');\n\n    if (param == 'id' && typeof arg !== 'string') {\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error('Stripe: \"id\" must be a string, but got: ' + typeof arg + ' (on API request to `' + requestMethod + ' ' + path + '`)');\n    }\n\n    if (!arg) {\n      if (isOptional) {\n        urlData[param] = '';\n        continue;\n      }\n\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error('Stripe: Argument \"' + urlParams[i] + '\" required, but got: ' + arg + ' (on API request to `' + requestMethod + ' ' + path + '`)');\n    }\n\n    urlData[param] = args.shift();\n  } // Pull request data and options (headers, auth) from args.\n\n\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args); // Validate that there are no more args.\n\n  if (args.length) {\n    path = self.createResourcePathWithSymbols(spec.path);\n    throw new Error('Stripe: Unknown arguments (' + args + '). Did you mean to pass an options ' + 'object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.' + ' (on API request to ' + requestMethod + ' `' + path + '`)');\n  }\n\n  var requestPath = self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {\n      headers: headers\n    });\n  }\n\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    data: data,\n    auth: options.auth,\n    headers: headers,\n    host: host\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n\n    self._request(opts.requestMethod, opts.host, opts.requestPath, opts.data, opts.auth, {\n      headers: opts.headers\n    }, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/makeRequest.js"],"names":["utils","require","OPTIONAL_REGEX","getRequestOpts","self","requestArgs","spec","overrideData","commandPath","path","makeURLInterpolator","requestMethod","method","toUpperCase","urlParams","encode","data","host","args","slice","call","urlData","createUrlData","i","l","length","arg","param","isOptional","test","replace","createResourcePathWithSymbols","Error","shift","dataFromArgs","getDataFromArgs","Object","assign","options","getOptionsFromArgs","requestPath","createFullPath","headers","validator","auth","makeRequest","Promise","resolve","reject","opts","err","requestCallback","response","transformResponseData","_request","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\nvar OPTIONAL_REGEX = /^optional!/;\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var commandPath = typeof spec.path == 'function' ? spec.path\n    : utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n  var encode = spec.encode || function(data) {return data;};\n  var host = spec.host;\n\n  // Don't mutate args externally.\n  var args = [].slice.call(requestArgs);\n\n  // Generate and validate url params.\n  var urlData = self.createUrlData();\n  for (var i = 0, l = urlParams.length; i < l; ++i) {\n    var path;\n\n    // Note that we shift the args array after every iteration so this just\n    // grabs the \"next\" argument for use as a URL parameter.\n    var arg = args[0];\n\n    var param = urlParams[i];\n\n    var isOptional = OPTIONAL_REGEX.test(param);\n    param = param.replace(OPTIONAL_REGEX, '');\n\n    if (param == 'id' && typeof arg !== 'string') {\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error(\n        'Stripe: \"id\" must be a string, but got: ' + typeof arg +\n        ' (on API request to `' + requestMethod + ' ' + path + '`)'\n      );\n    }\n\n    if (!arg) {\n      if (isOptional) {\n        urlData[param] = '';\n        continue;\n      }\n\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error(\n        'Stripe: Argument \"' + urlParams[i] + '\" required, but got: ' + arg +\n        ' (on API request to `' + requestMethod + ' ' + path + '`)'\n      );\n    }\n\n    urlData[param] = args.shift();\n  }\n\n  // Pull request data and options (headers, auth) from args.\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args);\n\n  // Validate that there are no more args.\n  if (args.length) {\n    path = self.createResourcePathWithSymbols(spec.path);\n    throw new Error(\n      'Stripe: Unknown arguments (' + args + '). Did you mean to pass an options ' +\n      'object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.' +\n      ' (on API request to ' + requestMethod + ' `' + path + '`)'\n    );\n  }\n\n  var requestPath = self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {headers: headers});\n  }\n\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    data: data,\n    auth: options.auth,\n    headers: headers,\n    host: host,\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function(resolve, reject) {\n    try {\n      var opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(\n          spec.transformResponseData ?\n            spec.transformResponseData(response) :\n            response\n        );\n      }\n    }\n\n    self._request(opts.requestMethod, opts.host, opts.requestPath, opts.data, opts.auth, {headers: opts.headers}, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;\n"]},"metadata":{},"sourceType":"script"}