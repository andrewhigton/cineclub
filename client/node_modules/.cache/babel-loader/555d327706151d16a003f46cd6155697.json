{"ast":null,"code":"import axios from 'axios'; // import { setAlert } from './alert';\n// import {\n//   GET_FILM,\n//   UPDATE_FILM,\n//   GET_FILMS,\n//   CLEAR_FILM,\n//   FILM_ERROR,\n//   DELETE_FILM\n// } from './types';\n// Get all Films\n\nexport const loadFilms = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR' //payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; //Get film by ID\n\nexport const getFilmById = film_id => async dispatch => {\n  dispatch({\n    type: CLEAR_FILM\n  });\n\n  try {\n    const res = await axios.get(`/api/film/${film_id}`); // .populate('film', ['title', 'cinema']);\n\n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // create film\n\nexport const createFilm = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/film/create-film', formData, config);\n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const updateFilm = (formData, history) => async dispatch => {\n  dispatch({\n    type: 'CLEAR_FILM'\n  });\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: 'UPDATE_FILM',\n      payload: res.data\n    });\n    alert('Thanks for your booking', 'success');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const deleteFilm = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/tickets/${id}`);\n    dispatch({\n      type: 'DELETE_FILM',\n      payload: res.data\n    });\n    alert('Tickets Removed', 'success');\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/actions/film.js"],"names":["axios","loadFilms","dispatch","res","get","type","GET_FILMS","payload","data","err","getFilmById","film_id","CLEAR_FILM","GET_FILM","msg","response","statusText","status","createFilm","formData","history","config","headers","post","push","errors","alert","forEach","error","updateFilm","put","deleteFilm","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { setAlert } from './alert';\n// import {\n//   GET_FILM,\n//   UPDATE_FILM,\n//   GET_FILMS,\n//   CLEAR_FILM,\n//   FILM_ERROR,\n//   DELETE_FILM\n// } from './types';\n\n// Get all Films\nexport const loadFilms = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/film');\n\n    dispatch({\n      type: GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR',\n      //payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n  };\n\n//Get film by ID\nexport const getFilmById = film_id => async dispatch => {\n  dispatch({ type: CLEAR_FILM });\n  try {\n    const res = await axios.get(`/api/film/${film_id}`)\n    // .populate('film', ['title', 'cinema']);\n    \n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// create film\nexport const createFilm = ( formData, history ) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  \n    const res = await axios.post('/api/film/create-film', formData, config);    \n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const updateFilm = (formData, history) => async dispatch => {\n  dispatch({ type: 'CLEAR_FILM' });\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: 'UPDATE_FILM',\n      payload: res.data\n      });\n    alert('Thanks for your booking', 'success');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    }\n\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const deleteFilm = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/tickets/${id}`);\n\n    dispatch({\n      type: 'DELETE_FILM',\n      payload: res.data\n    });\n\n    alert('Tickets Removed', 'success');\n  } catch (err) {\n    dispatch({\n      type: 'FILM_ERROR',\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}