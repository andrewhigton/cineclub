{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx\";\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\n// import { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport axios from 'axios';\n\nconst ifValidCardElement = card => card === null;\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    price\n  } = _ref;\n  console.log('button call', price);\n  const stripe = useStripe();\n  const elements = useElements();\n  let currentUser = 'bob';\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    try {\n      var _paymentResult$paymen;\n\n      const response = await axios.post('http://localhost:5000/api/film/payment');\n      const clientSecret = response.data;\n      const cardDetails = elements.getElement(CardElement);\n      if (!ifValidCardElement(cardDetails)) return;\n      if (cardDetails === null) return;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n\n      if ((paymentResult === null || paymentResult === void 0 ? void 0 : (_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        alert('payment success');\n        updateUserTickets();\n        updateFilm();\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      if (err instanceof Error) {\n        alert(err.message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Credit Card Payment:\"), /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }\n  }, \"Pay Now\"))));\n};\n\nexport default StripeCheckoutButton;","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx"],"names":["React","useState","CardElement","useStripe","useElements","FormContainer","PaymentFormContainer","updateUserTickets","updateFilm","axios","ifValidCardElement","card","StripeCheckoutButton","price","console","log","stripe","elements","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","post","clientSecret","data","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","paymentIntent","status","alert","err","Error","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAsD,yBAAtD;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AAEA;AACA,SAAwBC,oBAAxB,QAAoD,wBAApD;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,GAAIC,IAAD,IAA+DA,IAAI,KAAK,IAAnG;;AAEA,MAAMC,oBAAoB,GAAG,QAAa;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAG1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,KAA3B;AACA,QAAMG,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAIc,WAAW,GAAG,KAAlB;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDnB,QAAQ,CAAC,KAAD,CAA9D;;AAEA,QAAMoB,cAAc,GAAG,MAAOC,CAAP,IAAyC;AAE/DA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACP,MAAD,IAAW,CAACC,QAAf,EAAyB;AACxB;AACA;;AAED,QAAK;AAAA;;AACL,YAAMO,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAAW,wCAAX,CAAvB;AAEC,YAAMC,YAAY,GAAGF,QAAQ,CAACG,IAA9B;AAEA,YAAMC,WAAW,GAAGX,QAAQ,CAACY,UAAT,CAAoB3B,WAApB,CAApB;AACA,UAAG,CAACQ,kBAAkB,CAACkB,WAAD,CAAtB,EAAqC;AAGrC,UAAGA,WAAW,KAAK,IAAnB,EAAyB;AAEvB,YAAME,aAAa,GAAG,MAAMd,MAAM,CAACe,kBAAP,CAA0BL,YAA1B,EAAwC;AAClEM,QAAAA,cAAc,EAAE;AACdrB,UAAAA,IAAI,EAAEiB,WADQ;AAEdK,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EAAE;AADS;AAFH;AADkD,OAAxC,CAA5B;;AASA,UAAG,CAAAJ,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEK,aAAf,gFAA8BC,MAA9B,MAAyC,WAA5C,EAAyD;AACxDC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACA9B,QAAAA,iBAAiB;AACjBC,QAAAA,UAAU;AACV;;AAEDY,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AAED,KA5BF,CA4BG,OAAOkB,GAAP,EAAY;AACb,UAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACzBF,QAAAA,KAAK,CAACC,GAAG,CAACE,OAAL,CAAL;AACA;AACF;AAED,GAzCD;;AA4CC,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEnB,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGC;AAAQ,IAAA,QAAQ,EAAEF,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHD,CADJ,CADD,CAFF;AAYA,CAjED;;AAmEA,eAAeP,oBAAf","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { CardElement, useStripe, useElements,  } from '@stripe/react-stripe-js';\nimport { StripeCardElement  } from '@stripe/stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film';\n// import { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\n\nimport axios from 'axios';\n\nconst ifValidCardElement = (card: StripeCardElement | null): card is StripeCardElement => card === null; \n\nconst StripeCheckoutButton = ({price}) => {\n\n\nconsole.log('button call', price)\nconst stripe = useStripe();\nconst elements = useElements();\nlet currentUser = 'bob';\nconst [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\nconst paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n  \t\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment') \n\t\n\t\tconst clientSecret = response.data;\n \t\n\t\tconst cardDetails = elements.getElement(CardElement)\n\t\tif(!ifValidCardElement(cardDetails)) return;\n\n\n\t\tif(cardDetails === null) return;\n\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    if(paymentResult?.paymentIntent?.status === 'succeeded') {\n    \talert('payment success');\n    \tupdateUserTickets()\n    \tupdateFilm()\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t  alert(err.message);\n\t\t\t}\n\t}\n\n}\n\n\n\treturn (\n\n\t\t\t<div> \n\t\t\t\t<PaymentFormContainer>\n      \t\t<FormContainer onSubmit={paymentHandler}>\n\t        \t<h2>Credit Card Payment:</h2>\n\t        \t<CardElement />\n\t        <button disabled={isProcessingPayment}>Pay Now</button>\n\t      </FormContainer>\n    \t\t</PaymentFormContainer>\n\t\t\t</div>\n\t\t )\n}\n\nexport default StripeCheckoutButton;"]},"metadata":{},"sourceType":"module"}