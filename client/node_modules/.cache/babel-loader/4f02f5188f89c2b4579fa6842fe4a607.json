{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ActionType.AUTH_ERROR\n    });\n  }\n};\n// Register User\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: ActionType.REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        console.log(err);\n        alert(err);\n      }\n\n      dispatch({\n        type: ActionType.REGISTER_FAIL\n      });\n    }\n  };\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    }\n  }\n}; // Add Tickets\n\nexport const updateUserTickets = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    }); //history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert(errors);\n      console.log(errors);\n    }\n  }\n};\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    alert(err.response.statusText);\n    console.log(err.response.statusText);\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","USER_LOADED","payload","data","err","console","log","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","errors","response","alert","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","updateUserTickets","formData","history","UPDATE_USER","deleteTickets","id","delete","statusText","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport setAuthToken from '../utils/setAuthToken';\n// import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\ninterface ChildComponentProps extends RouteComponentProps<any> {\n history: any;\n}\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser | any>) => {\n  \n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  \n  try {\n    const res = await axios.get('/api/auth');\n    \n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err)\n    dispatch({\n      type: ActionType.AUTH_ERROR\n    });\n  }\n};\n\ninterface RegisterTypes {\n  name: string;\n  email: string; \n  password: string;\n}\n\n// Register User\nexport const register: () => React.FC<RegisterTypes>  = ({ name, email, password }) => \nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    \n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n    } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      console.log(err)\n      alert(err)\n    }\n\n    dispatch({\n      type: ActionType.REGISTER_FAIL\n    });\n  }\n};\n\n//Login User\nexport const login = (email: string, password: string) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n  \n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    dispatch(loadUser())\n  } \n  catch (err) {\n    \n    const errors = err.response.data.errors;\n    if (errors) {\n      alert(errors)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }\n  }\n\n};\n\n// Add Tickets\nexport const updateUserTickets: React.SFC<ChildComponentProps> = (formData: string, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    //history.push('/film/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      alert(errors)\n      console.log(errors)\n    }\n  }\n};\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    alert(err.response.statusText)\n    console.log(err.response.statusText)\n    \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}