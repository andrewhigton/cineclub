{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n// Load User\nexport const loadUser = () => async dispatch => {\n  //so this isn't working, authed, but no loading of user \n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    alert('Please check your email and password');\n    dispatch({\n      type: ActionType.AUTH_ERROR,\n      payload: null\n    });\n  }\n}; //     return axios.get('/api/auth')\n//     .then(res => {\n// console.log('user loaded')\n//       console.log(res.data)\n//       dispatch({\n//       type: ActionType.USER_LOADED,\n//       payload: res.data\n//     })\n//   })\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//             type: ActionType.AUTH_ERROR,\n//             payload: null\n//         });\n//       }\n//   });\n// }\n// Register User\n\nexport const register = (name, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.REGISTER_FAIL,\n        payload: null\n      });\n    }\n  }\n}; //   return axios.post('/api/users', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.REGISTER_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       //change this to a warning, with json? \n//       alert('Something went wrong. Please check your email and password')\n//       dispatch({\n//       type: ActionType.REGISTER_FAIL,\n//       payload: null\n//     });\n//     }\n//   });\n// };\n//Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    } //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n\n  }\n}; //   return axios.post('/api/auth', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//           type: ActionType.LOGIN_FAIL,\n//           payload: errors\n//         });\n//       }\n//   });\n// };\n//Login User\n// export const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   };\n//   const body = JSON.stringify({ email, password });\n// try {\n//     const res = await axios.post('/api/auth', body, config);\n//     dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//     dispatch<any>(loadUser());          \n//   } catch (err: any) {\n//     console.log(err)\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       alert(errors)\n//       dispatch({\n//       type: ActionType.LOGIN_FAIL,\n//       payload: null\n//     });\n//     }\n//   }\n// };\n// Add Tickets\n\nexport const updateUserTickets = formData => console.log('called');\n\nasync dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/users/ticket', formData, config);\n    console.log('res ' + res);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    }); //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      }); // const errors = err.response.data.errors;\n      // if (errors) {\n      //   console.log(errors)\n    }\n  }\n};\n\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    } // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","USER_LOADED","payload","data","err","alert","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","updateUserTickets","formData","console","log","UPDATE_USER","deleteTickets","id","delete","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport setAuthToken from '../utils/setAuthToken';\n\ninterface ChildComponentProps extends RouteComponentProps<any> {\n history: any;\n}\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser>) => {\n  //so this isn't working, authed, but no loading of user \n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  \n  \ntry {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    })\n} catch (err) {\n          alert('Please check your email and password')\n          dispatch({\n            type: ActionType.AUTH_ERROR,\n            payload: null\n        });\n      }\n  };\n\n//     return axios.get('/api/auth')\n//     .then(res => {\n// console.log('user loaded')\n//       console.log(res.data)\n//       dispatch({\n//       type: ActionType.USER_LOADED,\n//       payload: res.data\n//     })\n//   })\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//             type: ActionType.AUTH_ERROR,\n//             payload: null\n//         });\n//       }\n//   });\n// }\n\n// Register User\nexport const register = ( name: string, email: string, password: string ) => \n\nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  const body = JSON.stringify({ name, email, password });\n\n    try {\n    const res = await axios.post('/api/users', body, config);\n  \n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch<any>(loadUser());\n    \n\n    } catch (err) {\n    \n  \n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.REGISTER_FAIL,\n      payload: null\n    });\n    \n    }\n\n    \n  }\n};\n\n\n\n//   return axios.post('/api/users', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.REGISTER_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       //change this to a warning, with json? \n//       alert('Something went wrong. Please check your email and password')\n//       dispatch({\n//       type: ActionType.REGISTER_FAIL,\n//       payload: null\n//     });\n//     }\n//   });\n// };\n\n//Login User\nexport const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    dispatch<any>(loadUser());\n  } \n  catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n    //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n  }\n};\n//   return axios.post('/api/auth', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//           type: ActionType.LOGIN_FAIL,\n//           payload: errors\n//         });\n//       }\n//   });\n// };\n\n\n\n//Login User\n// export const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   };\n\n//   const body = JSON.stringify({ email, password });\n// try {\n//     const res = await axios.post('/api/auth', body, config);\n   \n//     dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//     dispatch<any>(loadUser());          \n\n//   } catch (err: any) {\n//     console.log(err)\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       alert(errors)\n//       dispatch({\n//       type: ActionType.LOGIN_FAIL,\n//       payload: null\n//     });\n//     }\n//   }\n// };\n\n// Add Tickets\nexport const updateUserTickets = (formData) =>\nconsole.log('called') \nasync (dispatch: Dispatch<ActionUser>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/users/ticket', formData, config);\n    console.log('res ' + res)\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    // const errors = err.response.data.errors;\n    // if (errors) {\n     \n    //   console.log(errors)\n    }\n  }\n};\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }\n\n    // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n    \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}