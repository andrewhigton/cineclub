{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n// Add Tickets\nexport const updateUserTickets = formData => async dispatch => {\n  console.log('calld ', JSON.parse(formData));\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //what does this do? and how? what info does it include?\n    //what is formData  \n\n    const res = await axios.post('/api/users/ticket', formData, config);\n    console.log('res ' + res);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    }); //history.push('/film/dashboard');\n  } catch (err) {\n    console.log('err'); // if (err) {\n    //   alert(err)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL,\n    //   payload: null\n    // });\n    // }\n  }\n}; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    alert('Please check your email and password');\n    dispatch({\n      type: ActionType.AUTH_ERROR,\n      payload: null\n    });\n  }\n}; // Register User\n\nexport const register = (name, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.REGISTER_FAIL,\n        payload: null\n      });\n    }\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    }\n  }\n};\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    }\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","updateUserTickets","formData","dispatch","console","log","JSON","parse","config","headers","res","post","type","UPDATE_USER","payload","data","err","loadUser","localStorage","token","get","USER_LOADED","alert","AUTH_ERROR","register","name","email","password","body","stringify","REGISTER_SUCCESS","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","deleteTickets","id","delete","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ticketType, filmInterface, filmType } from '../utils/componentTypes';\nimport setAuthToken from '../utils/setAuthToken';\n\ninterface ChildComponentProps extends RouteComponentProps<any> {\n history: any;\n}\n\ntype JointComponentProps = ChildComponentProps & ActionUser; \n\n\n// Add Tickets\nexport const updateUserTickets = (formData: string ) => async (dispatch: Dispatch<ActionUser>) => {\n  \nconsole.log('calld ', JSON.parse(formData))\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    \n   //what does this do? and how? what info does it include?\n   //what is formData  \n    const res = await axios.post('/api/users/ticket', formData, config);\n    \n    console.log('res ' + res)\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    //history.push('/film/dashboard');\n  } catch (err) {\n    console.log('err')\n    // if (err) {\n    //   alert(err)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL,\n    //   payload: null\n    // });\n    // }\n  }\n};\n\n\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser>) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  \n  \ntry {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    })\n} catch (err) {\n          alert('Please check your email and password')\n          dispatch({\n            type: ActionType.AUTH_ERROR,\n            payload: null\n        });\n      }\n  };\n\n\n// Register User\nexport const register = ( name: string, email: string, password: string ) => \n\nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  const body = JSON.stringify({ name, email, password });\n\n    try {\n    const res = await axios.post('/api/users', body, config);\n  \n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch<any>(loadUser());\n    \n\n    } catch (err) {\n    \n  \n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.REGISTER_FAIL,\n      payload: null\n    });\n    \n    }\n\n    \n  }\n};\n\n//Login User\nexport const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    dispatch<any>(loadUser());\n  } \n  catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n\n  }\n};\n\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }  \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}