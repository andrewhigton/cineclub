{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar utils = require('../utils');\n\nvar StripeResource = require('../StripeResource');\n\nvar stripeMethod = StripeResource.method;\n\nvar multipartDataGenerator = require('../MultipartDataGenerator');\n\nvar Error = require('../Error');\n\nmodule.exports = StripeResource.extend({\n  requestDataProcessor: function (method, data, headers, callback) {\n    data = data || {};\n\n    if (method === 'POST') {\n      return getProcessorForSourceType(data);\n    } else {\n      return callback(null, utils.stringifyRequestData(data));\n    }\n\n    function getProcessorForSourceType(data) {\n      var isStream = utils.checkForStream(data);\n\n      if (isStream) {\n        return streamProcessor(multipartDataGenerator);\n      } else {\n        var buffer = multipartDataGenerator(method, data, headers);\n        return callback(null, buffer);\n      }\n    }\n\n    function streamProcessor(fn) {\n      var bufferArray = [];\n      data.file.data.on('data', function (line) {\n        bufferArray.push(line);\n      }).on('end', function () {\n        var bufferData = Object.assign({}, data);\n        bufferData.file.data = Buffer.concat(bufferArray);\n        var buffer = fn(method, bufferData, headers);\n        callback(null, buffer);\n      }).on('error', function (err) {\n        var errorHandler = streamError(callback);\n        errorHandler(err);\n      });\n    }\n\n    function streamError(callback) {\n      var StreamProcessingError = Error.extend({\n        type: 'StreamProcessingError',\n        populate: function (raw) {\n          this.type = this.type;\n          this.message = raw.message;\n          this.detail = raw.detail;\n        }\n      });\n      return function (error) {\n        callback(new StreamProcessingError({\n          message: 'An error occurred while attempting to process the file for upload.',\n          detail: error\n        }), null);\n      };\n    }\n  },\n  path: 'files',\n  includeBasic: ['list', 'retrieve'],\n  create: stripeMethod({\n    method: 'POST',\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    host: 'files.stripe.com'\n  })\n});","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/resources/Files.js"],"names":["Buffer","require","utils","StripeResource","stripeMethod","method","multipartDataGenerator","Error","module","exports","extend","requestDataProcessor","data","headers","callback","getProcessorForSourceType","stringifyRequestData","isStream","checkForStream","streamProcessor","buffer","fn","bufferArray","file","on","line","push","bufferData","Object","assign","concat","err","errorHandler","streamError","StreamProcessingError","type","populate","raw","message","detail","error","path","includeBasic","create","host"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAApC;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIG,YAAY,GAAGD,cAAc,CAACE,MAAlC;;AACA,IAAIC,sBAAsB,GAAGL,OAAO,CAAC,2BAAD,CAApC;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,UAAD,CAAnB;;AAEAO,MAAM,CAACC,OAAP,GAAiBN,cAAc,CAACO,MAAf,CAAsB;AAErCC,EAAAA,oBAAoB,EAAE,UAASN,MAAT,EAAiBO,IAAjB,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0C;AAC9DF,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,QAAIP,MAAM,KAAK,MAAf,EAAuB;AACrB,aAAOU,yBAAyB,CAACH,IAAD,CAAhC;AACD,KAFD,MAEO;AACL,aAAOE,QAAQ,CAAC,IAAD,EAAOZ,KAAK,CAACc,oBAAN,CAA2BJ,IAA3B,CAAP,CAAf;AACD;;AAED,aAASG,yBAAT,CAAmCH,IAAnC,EAAyC;AACvC,UAAIK,QAAQ,GAAGf,KAAK,CAACgB,cAAN,CAAqBN,IAArB,CAAf;;AACA,UAAIK,QAAJ,EAAc;AACZ,eAAOE,eAAe,CAACb,sBAAD,CAAtB;AACD,OAFD,MAEO;AACL,YAAIc,MAAM,GAAGd,sBAAsB,CAACD,MAAD,EAASO,IAAT,EAAeC,OAAf,CAAnC;AACA,eAAOC,QAAQ,CAAC,IAAD,EAAOM,MAAP,CAAf;AACD;AACF;;AAED,aAASD,eAAT,CAA0BE,EAA1B,EAA8B;AAC5B,UAAIC,WAAW,GAAG,EAAlB;AACAV,MAAAA,IAAI,CAACW,IAAL,CAAUX,IAAV,CAAeY,EAAf,CAAkB,MAAlB,EAA0B,UAASC,IAAT,EAAe;AACvCH,QAAAA,WAAW,CAACI,IAAZ,CAAiBD,IAAjB;AACD,OAFD,EAEGD,EAFH,CAEM,KAFN,EAEa,YAAW;AACtB,YAAIG,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,IAAlB,CAAjB;AACAe,QAAAA,UAAU,CAACJ,IAAX,CAAgBX,IAAhB,GAAuBZ,MAAM,CAAC8B,MAAP,CAAcR,WAAd,CAAvB;AACA,YAAIF,MAAM,GAAGC,EAAE,CAAChB,MAAD,EAASsB,UAAT,EAAqBd,OAArB,CAAf;AACAC,QAAAA,QAAQ,CAAC,IAAD,EAAOM,MAAP,CAAR;AACD,OAPD,EAOGI,EAPH,CAOM,OAPN,EAOe,UAASO,GAAT,EAAc;AAC3B,YAAIC,YAAY,GAAGC,WAAW,CAACnB,QAAD,CAA9B;AACAkB,QAAAA,YAAY,CAACD,GAAD,CAAZ;AACD,OAVD;AAWD;;AAED,aAASE,WAAT,CAAqBnB,QAArB,EAA+B;AAC7B,UAAIoB,qBAAqB,GAAG3B,KAAK,CAACG,MAAN,CAAa;AACvCyB,QAAAA,IAAI,EAAE,uBADiC;AAEvCC,QAAAA,QAAQ,EAAE,UAASC,GAAT,EAAc;AACtB,eAAKF,IAAL,GAAY,KAAKA,IAAjB;AACA,eAAKG,OAAL,GAAeD,GAAG,CAACC,OAAnB;AACA,eAAKC,MAAL,GAAcF,GAAG,CAACE,MAAlB;AACD;AANsC,OAAb,CAA5B;AAQA,aAAO,UAASC,KAAT,EAAgB;AACrB1B,QAAAA,QAAQ,CACN,IAAIoB,qBAAJ,CAA0B;AACxBI,UAAAA,OAAO,EAAE,oEADe;AAExBC,UAAAA,MAAM,EAAEC;AAFgB,SAA1B,CADM,EAKN,IALM,CAAR;AAOD,OARD;AASD;AACF,GAvDoC;AAyDrCC,EAAAA,IAAI,EAAE,OAzD+B;AA0DrCC,EAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,UAAT,CA1DuB;AA4DrCC,EAAAA,MAAM,EAAEvC,YAAY,CAAC;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBQ,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFU;AAKnB+B,IAAAA,IAAI,EAAE;AALa,GAAD;AA5DiB,CAAtB,CAAjB","sourcesContent":["'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar utils = require('../utils');\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar multipartDataGenerator = require('../MultipartDataGenerator');\nvar Error = require('../Error');\n\nmodule.exports = StripeResource.extend({\n\n  requestDataProcessor: function(method, data, headers, callback) {\n    data = data || {};\n\n    if (method === 'POST') {\n      return getProcessorForSourceType(data);\n    } else {\n      return callback(null, utils.stringifyRequestData(data));\n    }\n\n    function getProcessorForSourceType(data) {\n      var isStream = utils.checkForStream(data);\n      if (isStream) {\n        return streamProcessor(multipartDataGenerator);\n      } else {\n        var buffer = multipartDataGenerator(method, data, headers);\n        return callback(null, buffer);\n      }\n    }\n\n    function streamProcessor (fn) {\n      var bufferArray = [];\n      data.file.data.on('data', function(line) {\n        bufferArray.push(line);\n      }).on('end', function() {\n        var bufferData = Object.assign({}, data);\n        bufferData.file.data = Buffer.concat(bufferArray);\n        var buffer = fn(method, bufferData, headers);\n        callback(null, buffer);\n      }).on('error', function(err) {\n        var errorHandler = streamError(callback);\n        errorHandler(err);\n      });\n    }\n\n    function streamError(callback) {\n      var StreamProcessingError = Error.extend({\n        type: 'StreamProcessingError',\n        populate: function(raw) {\n          this.type = this.type;\n          this.message = raw.message;\n          this.detail = raw.detail;\n        }\n      });\n      return function(error) {\n        callback(\n          new StreamProcessingError({\n            message: 'An error occurred while attempting to process the file for upload.',\n            detail: error,\n          }),\n          null\n        );\n      }\n    }\n  },\n\n  path: 'files',\n  includeBasic: ['list', 'retrieve'],\n\n  create: stripeMethod({\n    method: 'POST',\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    host: 'files.stripe.com',\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}