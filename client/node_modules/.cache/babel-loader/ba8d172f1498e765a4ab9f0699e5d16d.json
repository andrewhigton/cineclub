{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  console.log('user loading');\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  return axios.get('/api/auth').then(res => {\n    console.log('user ' + res); // console.log(res.data)\n\n    dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      alert('Please check your email and password');\n      dispatch({\n        type: ActionType.AUTH_ERROR,\n        payload: null\n      });\n    }\n  });\n}; // try {\n//     const res = await axios.get('/api/auth');\n//     console.log('user ' + res)\n//     dispatch({\n//       type: ActionType.USER_LOADED,\n//       payload: res.data\n//     })\n// } catch (err) {\n//       // const errors = err.response.data.errors;\n//         // if (err) {\n//           alert('Please check your email and password')\n//           dispatch({\n//             type: ActionType.AUTH_ERROR,\n//             payload: null\n//         });\n//       }\n//   };\n// Register User\n\nexport const register = (name, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  return axios.post('/api/users', body, config).then(res => {\n    console.log(res);\n    dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).then(dispatch(loadUser())).catch(err => {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      //change this to a warning, with json? \n      alert('Something went wrong. Please check your email and password');\n      dispatch({\n        type: ActionType.REGISTER_FAIL,\n        payload: null\n      });\n    }\n  });\n}; //   try {\n//     const res = await axios.post('/api/users', body, config);\n//     //console.log(res)  \n//     dispatch({\n//       type: ActionType.REGISTER_SUCCESS,\n//       payload: res.data\n//     });\n//     dispatch<any>(loadUser());\n//     } catch (err) {\n//     if (err) {\n//       alert(err)\n//       dispatch({\n//       type: ActionType.REGISTER_FAIL,\n//       // type: ActionType.LOGOUT,\n//       payload: null\n//     });\n//     }\n//   }\n// };\n//Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    }); //how to wrtie type for this? \n\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      });\n    } //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n\n  }\n}; //   return axios.post('/api/auth', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//           type: ActionType.LOGIN_FAIL,\n//           payload: errors\n//         });\n//       }\n//   });\n// };\n//Login User\n// export const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   };\n//   const body = JSON.stringify({ email, password });\n// try {\n//     const res = await axios.post('/api/auth', body, config);\n//     dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//     dispatch<any>(loadUser());          \n//   } catch (err: any) {\n//     console.log(err)\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       alert(errors)\n//       dispatch({\n//       type: ActionType.LOGIN_FAIL,\n//       payload: null\n//     });\n//     }\n//   }\n// };\n// Add Tickets\n\nexport const updateUserTickets = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    }); //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL,\n        payload: null\n      }); // const errors = err.response.data.errors;\n      // if (errors) {\n      //   console.log(errors)\n    }\n  }\n};\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err);\n      dispatch({\n        type: ActionType.LOGIN_FAIL\n      });\n    } // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: ActionType.LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/typescript/Cineclub/client/src/actions/auth.tsx"],"names":["axios","ActionType","setAuthToken","loadUser","dispatch","console","log","localStorage","token","get","then","res","type","USER_LOADED","payload","data","catch","err","errors","response","alert","AUTH_ERROR","register","name","email","password","config","headers","body","JSON","stringify","post","REGISTER_SUCCESS","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","updateUserTickets","formData","UPDATE_USER","deleteTickets","id","delete","logout","LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAIA,OAAOC,YAAP,MAAyB,uBAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAA0C;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBN,IAAAA,YAAY,CAACK,YAAY,CAACC,KAAd,CAAZ;AACD;;AACC,SAAOR,KAAK,CAACS,GAAN,CAAU,WAAV,EACNC,IADM,CACDC,GAAG,IAAI;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUK,GAAtB,EADa,CAEX;;AACAP,IAAAA,QAAQ,CAAC;AACTQ,MAAAA,IAAI,EAAEX,UAAU,CAACY,WADR;AAETC,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFJ,KAAD,CAAR;AAIH,GARQ,EASRC,KATQ,CASFC,GAAG,IAAI;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBG,MAAjC;;AACE,QAAIA,MAAJ,EAAY;AACVE,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACAhB,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEX,UAAU,CAACoB,UADV;AAEPP,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIH;AACJ,GAlBQ,CAAP;AAmBH,CAxBM,C,CA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMQ,QAAQ,GAAG,CAAEC,IAAF,EAAgBC,KAAhB,EAA+BC,QAA/B,KAExB,MAAOrB,QAAP,IAA0C;AAExC,QAAMsB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AAEA,SAAOzB,KAAK,CAAC+B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,EACNhB,IADM,CACDC,GAAG,IAAI;AACPN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACFP,IAAAA,QAAQ,CAAC;AACTQ,MAAAA,IAAI,EAAEX,UAAU,CAAC+B,gBADR;AAETlB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFJ,KAAD,CAAR;AAIH,GAPM,EAQNL,IARM,CAQDN,QAAQ,CAAMD,QAAQ,EAAd,CARP,EASNa,KATM,CASAC,GAAG,IAAI;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBG,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACV;AACAE,MAAAA,KAAK,CAAC,4DAAD,CAAL;AACAhB,MAAAA,QAAQ,CAAC;AACTQ,QAAAA,IAAI,EAAEX,UAAU,CAACgC,aADR;AAETnB,QAAAA,OAAO,EAAE;AAFA,OAAD,CAAR;AAID;AACF,GAnBM,CAAP;AAoBD,CAhCM,C,CAoCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;;AACA,OAAO,MAAMoB,KAAK,GAAG,CAACV,KAAD,EAAyBC,QAAzB,KAAuD,MAAOrB,QAAP,IAA0C;AACpH,QAAMsB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMd,GAAG,GAAG,MAAMX,KAAK,CAAC+B,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB;AACAtB,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEX,UAAU,CAACkC,aADV;AAEPrB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR,CAFE,CAMF;;AACAX,IAAAA,QAAQ,CAAMD,QAAQ,EAAd,CAAR;AACD,GARD,CASA,OAAOc,GAAP,EAAY;AACV,QAAIA,GAAJ,EAAS;AACPG,MAAAA,KAAK,CAACH,GAAD,CAAL;AACAb,MAAAA,QAAQ,CAAC;AACTQ,QAAAA,IAAI,EAAEX,UAAU,CAACmC,UADR;AAETtB,QAAAA,OAAO,EAAE;AAFA,OAAD,CAAR;AAID,KAPS,CAQV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF,CAnCM,C,CAoCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMuB,iBAAiB,GAAIC,QAAD,IACjC,MAAOlC,QAAP,IAA0C;AACxC,MAAI;AACF,UAAMsB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMhB,GAAG,GAAG,MAAMX,KAAK,CAAC+B,IAAN,CAAW,mBAAX,EAAgCO,QAAhC,EAA0CZ,MAA1C,CAAlB;AACAtB,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEX,UAAU,CAACsC,WADV;AAEPzB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR,CARE,CAYF;AACD,GAbD,CAaE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAJ,EAAS;AACPG,MAAAA,KAAK,CAACH,GAAD,CAAL;AACAb,MAAAA,QAAQ,CAAC;AACTQ,QAAAA,IAAI,EAAEX,UAAU,CAACmC,UADR;AAETtB,QAAAA,OAAO,EAAE;AAFA,OAAD,CAAR,CAFO,CAMT;AACA;AAEA;AACC;AACF;AACF,CA5BM;AA8BP,OAAO,MAAM0B,aAAa,GAAIC,EAAD,IAAgB,MAAMrC,QAAN,IAAkB;AAC7D,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMX,KAAK,CAAC0C,MAAN,CAAc,gBAAeD,EAAG,EAAhC,CAAlB;AAEArC,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEX,UAAU,CAACsC,WADV;AAEPzB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAJ,EAAS;AACPG,MAAAA,KAAK,CAACH,GAAD,CAAL;AACAb,MAAAA,QAAQ,CAAC;AACTQ,QAAAA,IAAI,EAAEX,UAAU,CAACmC;AADR,OAAD,CAAR;AAGD,KANW,CAQZ;AACA;;AAED;AACF,CApBM,C,CAsBP;;AACA,OAAO,MAAMO,MAAM,GAAG,MAAMvC,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAEX,UAAU,CAAC2C;AAAnB,GAAD,CAAR;AACD,CAFM","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionUser } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport setAuthToken from '../utils/setAuthToken';\n// import {\n//   REGISTER_SUCCESS,\n//   REGISTER_FAIL,\n//   USER_LOADED,\n//   UPDATE_USER,\n//   LOGIN_SUCCESS,\n//   LOGIN_FAIL,\n//   LOGOUT,\n//   AUTH_ERROR\n// } from './types';\n\ninterface ChildComponentProps extends RouteComponentProps<any> {\n history: any;\n}\n\n// Load User\nexport const loadUser = () => async (dispatch: Dispatch<ActionUser>) => {\n  console.log('user loading')\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n    return axios.get('/api/auth')\n    .then(res => {\n    console.log('user ' + res)\n      // console.log(res.data)\n      dispatch({\n      type: ActionType.USER_LOADED,\n      payload: res.data\n    })\n  })\n  .catch(err => {\n      const errors = err.response.data.errors;\n        if (errors) {\n          alert('Please check your email and password')\n          dispatch({\n            type: ActionType.AUTH_ERROR,\n            payload: null\n        });\n      }\n  });\n}\n\n// try {\n//     const res = await axios.get('/api/auth');\n//     console.log('user ' + res)\n//     dispatch({\n//       type: ActionType.USER_LOADED,\n//       payload: res.data\n//     })\n// } catch (err) {\n//       // const errors = err.response.data.errors;\n//         // if (err) {\n//           alert('Please check your email and password')\n//           dispatch({\n//             type: ActionType.AUTH_ERROR,\n//             payload: null\n//         });\n//       }\n//   };\n\n// Register User\nexport const register = ( name: string, email: string, password: string ) => \n\nasync (dispatch: Dispatch<ActionUser>) => {    \n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  return axios.post('/api/users', body, config)\n  .then(res => {\n        console.log(res)  \n      dispatch({\n      type: ActionType.REGISTER_SUCCESS,\n      payload: res.data\n    })\n  })\n  .then(dispatch<any>(loadUser()))\n  .catch(err => {\n    const errors = err.response.data.errors;\n    if (errors) {\n      //change this to a warning, with json? \n      alert('Something went wrong. Please check your email and password')\n      dispatch({\n      type: ActionType.REGISTER_FAIL,\n      payload: null\n    });\n    }\n  });\n};\n\n\n\n//   try {\n//     const res = await axios.post('/api/users', body, config);\n//     //console.log(res)  \n//     dispatch({\n//       type: ActionType.REGISTER_SUCCESS,\n//       payload: res.data\n//     });\n//     dispatch<any>(loadUser());\n    \n\n//     } catch (err) {\n    \n\n//     if (err) {\n//       alert(err)\n//       dispatch({\n//       type: ActionType.REGISTER_FAIL,\n//       // type: ActionType.LOGOUT,\n//       payload: null\n//     });\n    \n//     }\n\n    \n//   }\n// };\n\n\n\n//Login User\nexport const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: ActionType.LOGIN_SUCCESS,\n      payload: res.data\n    })\n    //how to wrtie type for this? \n    dispatch<any>(loadUser());\n  } \n  catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    }\n    //need to fix this\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   alert(errors)\n    //   dispatch({\n    //   type: ActionType.LOGIN_FAIL\n    // });\n    // }\n  }\n};\n//   return axios.post('/api/auth', body, config)\n//   .then(res => {\n//       dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//   })\n//   .then(dispatch<any>(loadUser()))\n//   .catch(err => {\n//       const errors = err.response.data.errors;\n//         if (errors) {\n//           alert('Please check your email and password')\n//           dispatch({\n//           type: ActionType.LOGIN_FAIL,\n//           payload: errors\n//         });\n//       }\n//   });\n// };\n\n\n\n//Login User\n// export const login = (email: string | number, password: string | number) => async (dispatch: Dispatch<ActionUser>) => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   };\n\n//   const body = JSON.stringify({ email, password });\n// try {\n//     const res = await axios.post('/api/auth', body, config);\n   \n//     dispatch({\n//       type: ActionType.LOGIN_SUCCESS,\n//       payload: res.data\n//     })\n//     dispatch<any>(loadUser());          \n\n//   } catch (err: any) {\n//     console.log(err)\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       alert(errors)\n//       dispatch({\n//       type: ActionType.LOGIN_FAIL,\n//       payload: null\n//     });\n//     }\n//   }\n// };\n\n// Add Tickets\nexport const updateUserTickets = (formData) => \nasync (dispatch: Dispatch<ActionUser>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/users/ticket', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n    //history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL,\n      payload: null\n    });\n    // const errors = err.response.data.errors;\n    // if (errors) {\n     \n    //   console.log(errors)\n    }\n  }\n};\n\nexport const deleteTickets = (id: string) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/tickets/${id}`);\n\n    dispatch({\n      type: ActionType.UPDATE_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err) {\n      alert(err)\n      dispatch({\n      type: ActionType.LOGIN_FAIL\n    });\n    }\n\n    // alert(err.response.statusText)\n    // console.log(err.response.statusText)\n    \n  }\n};\n\n//Logout\nexport const logout = () => dispatch => {\n  dispatch({ type: ActionType.LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}