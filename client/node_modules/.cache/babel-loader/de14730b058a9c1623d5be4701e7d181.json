{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from './types';\n// Get all Films\nexport const loadFilms = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n    });\n  }\n}; // Get film by ID\n\nexport const getFilmById = film_id => async dispatch => {\n  dispatch({\n    type: ActionType.CLEAR_FILM,\n    payload: null\n  });\n\n  try {\n    const res = await axios.get(`/api/film/${film_id}`);\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n    });\n  }\n}; // create film\n\nexport const createFilm = (formData, history) => async dispatch => {\n  // export const createFilm = ( formData ) => async (dispatch: Dispatch<ActionFilms>) => {\n  console.log(formData);\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/film/create-film', formData, config);\n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n    if (err) {\n      alert(err);\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n    });\n  }\n}; // export const updateFilm = (formData, history needed?) => async dispatch => {\n\nexport const updateFilm = formData => async dispatch => {\n  {\n    dispatch({\n      type: ActionType.CLEAR_FILM,\n      payload: null\n    });\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }; //need to create this as a named expoertr function??\n\n      const res = await axios.put('/api/film/booking', formData, config);\n      dispatch({\n        type: ActionType.UPDATE_FILM,\n        payload: res.data\n      });\n      alert('Thanks for your booking'); //history.push('/film/dashboard');\n    } catch (err) {\n      // const errors = err.response.data.errors;\n      // if (errors) {\n      //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n      // }\n      if (err) {\n        alert(err);\n      }\n\n      dispatch({\n        type: ActionType.FILM_ERROR,\n        payload: null // payload: { msg: err.response.statusText, status: err.response.status }\n\n      });\n    }\n  }\n  ;\n};\nexport const stripePayment = req => {\n  console.log('stripe call');\n\n  const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\n\n  try {\n    console.log('req ', req);\n    const amount = 200; // const { amount } = JSON.parse(req.body.amount);\n    // const { amount } = JSON.parse(event.body);\n\n    const paymentIntent = stripe.paymentIntents.create({\n      amount,\n      currency: \"GBP\",\n      payment_method_types: [\"card\"]\n    });\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        paymentIntent\n      })\n    };\n  } catch (error) {\n    console.log({\n      error\n    });\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error\n      })\n    };\n  }\n}; // export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/actions/film.tsx"],"names":["axios","ActionType","loadFilms","dispatch","res","get","type","GET_FILMS","payload","data","err","FILM_ERROR","getFilmById","film_id","CLEAR_FILM","GET_FILM","createFilm","formData","history","console","log","config","headers","post","push","alert","updateFilm","put","UPDATE_FILM","stripePayment","req","stripe","require","process","env","STRIPE_SECRET_KEY","amount","paymentIntent","paymentIntents","create","currency","payment_method_types","statusCode","body","JSON","stringify","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ActionType } from './types';\nimport { ActionFilms } from '../reducers/indexTypes';\nimport { Dispatch } from 'redux';\n\n// Get all Films\nexport const loadFilms = () => async (dispatch: Dispatch<ActionFilms>) => {\n  try {\n    const res = await axios.get('/api/film');\n    dispatch({\n      type: ActionType.GET_FILMS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null,\n    });\n  }\n  };\n\n// Get film by ID\nexport const getFilmById = (film_id: number) => async (dispatch: Dispatch<ActionFilms>) => \n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n   });\n  try {\n    const res = await axios.get(`/api/film/${film_id}`)\n\n    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n    });\n  }\n};\n\n// create film\nexport const createFilm = ( formData: string, history ) => async dispatch => {\n  // export const createFilm = ( formData ) => async (dispatch: Dispatch<ActionFilms>) => {\n\nconsole.log(formData)\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  \n    const res = await axios.post('/api/film/create-film', formData, config);    \n    dispatch({\n      type: ActionType.GET_FILM,\n      payload: res.data\n    });\n    history.push('/film/dashboard');\n  } catch (err) {\n\n    if (err) {\n      alert(err)\n    }\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n    });\n  }\n};\n\n// export const updateFilm = (formData, history needed?) => async dispatch => {\nexport const updateFilm = (formData) => async (dispatch: Dispatch<ActionFilms>) => {\n\n{\n  dispatch({ \n    type: ActionType.CLEAR_FILM,\n    payload: null,\n     });\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    \n\n    //need to create this as a named expoertr function??\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: ActionType.UPDATE_FILM,\n      payload: res.data\n      });\n    alert('Thanks for your booking');\n    //history.push('/film/dashboard');\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   alert(errors.forEach(error => dispatch(alert(error.msg, 'danger'))));\n    // }\n    if (err) {\n      alert(err)\n    }\n\n\n    dispatch({\n      type: ActionType.FILM_ERROR,\n      payload: null\n      // payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n}\n\nexport const stripePayment = (req) => {\n\nconsole.log('stripe call')\nconst stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\n\n\n\n\ntry {\n    console.log('req ', req)\n    const amount = 200;\n    // const { amount } = JSON.parse(req.body.amount);\n    // const { amount } = JSON.parse(event.body);\n\n    const paymentIntent = stripe.paymentIntents.create({\n      amount,\n      currency: \"GBP\",\n      payment_method_types: [\"card\"],\n\n    });\n  \n    return {\n      statusCode: 200,\n      body: JSON.stringify({ paymentIntent }),\n    };\n  } catch (error) {\n    console.log({ error });\n\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error }),\n    };\n  }\n}\n\n// export const deleteFilm = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/tickets/${id}`);\n\n//     dispatch({\n//       type: 'DELETE_FILM',\n//       payload: res.data\n//     });\n\n//     alert('Tickets Removed', 'success');\n//   } catch (err) {\n//     dispatch({\n//       type: 'FILM_ERROR',\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };"]},"metadata":{},"sourceType":"module"}