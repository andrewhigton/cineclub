{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/routing/PrivateRoute.tsx\";\nimport React from 'react';\nimport { Route, useNavigate } from 'react-router-dom';\nimport { connect } from 'react-redux'; // type RouteProps = {\n\n;\n\nconst PrivateRoute = props => {\n  const navigate = useNavigate();\n  const {\n    component: Component,\n    auth: {\n      isAuthenticated,\n      loading\n    },\n    path,\n    ...rest\n  } = props;\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: routeProps => !isAuthenticated && !loading ? navigate('/login') // <Redirect to='/login' />\n    : /*#__PURE__*/React.createElement(Component, Object.assign({}, routeProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 3\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 2\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute); // const PrivateRoute: React.FC<RouteComponentProps<RouteProps>> = ({ \n// \tcomponent: Component, \n// \tauth: { isAuthenticated, loading },\n// \tpath, \n// \t...rest \n// \t}) => (\n// \t<Route \n// \t{...rest} \n// \t\trender={props => \n// \t\t!isAuthenticated && !loading ? (  \n// \t\t<Redirect to='/login' />\n// \t\t) : (\n// \t\t<Component {...props} />\n// \t\t)\t\n// \t}\n// \t/>\n// );\n// const mapStateToProps = state => ({\n// \tauth: state.auth\n// });\n// export default connect(mapStateToProps)(PrivateRoute);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/routing/PrivateRoute.tsx"],"names":["React","Route","useNavigate","connect","PrivateRoute","props","navigate","component","Component","auth","isAuthenticated","loading","path","rest","routeProps","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAA4BC,WAA5B,QAA+C,kBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AASC;;AAEA,MAAMC,YAAY,GAAKC,KAAF,IAAgC;AAErD,QAAMC,QAAQ,GAAIJ,WAAW,EAA7B;AAEA,QAAM;AAAEK,IAAAA,SAAS,EAAEC,SAAb;AAAwBC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,KAA9B;AAA4DC,IAAAA,IAA5D;AAAkE,OAAGC;AAArE,MAA8ER,KAApF;AAEA,sBACA,oBAAC,KAAD,oBACIQ,IADJ;AAEC,IAAA,MAAM,EAAEC,UAAU,IAClB,CAACJ,eAAD,IAAoB,CAACC,OAArB,GACGL,QAAQ,CAAC,QAAD,CADX,CAEA;AAFA,mBAIA,oBAAC,SAAD,oBAAeQ,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;AAaA,CAnBA;;AAqBD,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCP,EAAAA,IAAI,EAAEO,KAAK,CAACP;AADqB,CAAL,CAA7B;;AAIA,eAAeN,OAAO,CAACY,eAAD,CAAP,CAAyBX,YAAzB,CAAf,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\n\nimport { Route, RouteProps, useNavigate } from 'react-router-dom'\nimport { connect } from 'react-redux';\n\n// type RouteProps = {\n\tinterface PrivateRouteProps extends RouteProps {\n\tauth: {\n\t\tisAuthenticated: boolean,\n\t\tloading: boolean,\n\t}\n\tpath?: string,\n\tcomponent: React.ComponentType<any>;\n\t// Component: React.ComponentType<any>;\n};\n\n\tconst PrivateRoute = ( props: PrivateRouteProps ) => {\n\t\n\tconst navigate =  useNavigate()\n\n\tconst { component: Component, auth: { isAuthenticated, loading }, path, ...rest } = props; \n\n\treturn (\n\t<Route \n\t{...rest} \n\t\trender={routeProps => \n\t\t!isAuthenticated && !loading ? (  \n    \tnavigate('/login')  \n\t\t// <Redirect to='/login' />\n\t\t) : (\n\t\t<Component {...routeProps} />\n\t\t)\t\n\t}\n\t/>\n\t);\n}\n\nconst mapStateToProps = state => ({\n\tauth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n\n\n\n// const PrivateRoute: React.FC<RouteComponentProps<RouteProps>> = ({ \n\n// \tcomponent: Component, \n// \tauth: { isAuthenticated, loading },\n// \tpath, \n// \t...rest \n// \t}) => (\n\n// \t<Route \n// \t{...rest} \n// \t\trender={props => \n// \t\t!isAuthenticated && !loading ? (  \n// \t\t<Redirect to='/login' />\n// \t\t) : (\n// \t\t<Component {...props} />\n// \t\t)\t\n// \t}\n// \t/>\n// );\n\n// const mapStateToProps = state => ({\n// \tauth: state.auth\n// });\n\n// export default connect(mapStateToProps)(PrivateRoute);"]},"metadata":{},"sourceType":"module"}