{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { ticketType, filmType } from '../componentTypes/componentTypes';\nimport { updateFilm } from '../../actions/film';\nimport { updateUserTickets } from '../../actions/auth';\nimport axios from 'axios'; // interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n// type JointStripeProps = ChildComponentProps & StripeProps; \n\nconst StripeCheckoutButton = _ref => {\n  let {\n    price,\n    filmData,\n    ticketData,\n    updateFilm,\n    updateUserTickets // history, \n    // location \n\n  } = _ref;\n  // console.log(price)\n  // console.log(filmData)\n  // console.log(ticketData)\n  const priceForStripe = price * 100; // const publishableKey = 'pk_test_GxoLwpaJRAn1kdTQGlL8EwZa00qqtVHbM3';\n\n  const publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\n\n  const onToken = token => {\n    // console.log(token)\n    if (isNaN(priceForStripe) || priceForStripe < 1) {\n      alert('Please add tickets before submitting');\n      return;\n    } // interface PayTypes {\n    // \t\turl: string, \n    // \t\tmethod: string,\n    // \t\tdata: {\n    // \t\t\tamount: number,\n    // \t\t\ttoken: number\n    // \t\t}\n    // }\n\n\n    axios({\n      url: '/api/film/payment',\n      method: 'post',\n      data: {\n        amount: priceForStripe,\n        token: token\n      }\n    }, onPayment()).then(response => {\n      console.log('resp is ' + response); // alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n\n      window.location.replace('http://localhost:3000/film/dashboard');\n    }).catch(error => {\n      // console.log('Payment error: ', JSON.parse(error)); \t\n      console.log('Payment error: ' + error);\n      alert('Payment error. Please use the provided credit card details');\n    });\n  };\n\n  const onPayment = () => {\n    //prob need history in these two to complete\n    //solve other problems first\n    updateFilm(filmData);\n    updateUserTickets(ticketData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"how-it-works stripe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StripeCheckout, {\n    label: \"Pay now\",\n    name: \"Saturday Cinema Club\",\n    billingAddress: true,\n    shippingAddress: true,\n    description: `Your total is £{price}`,\n    amount: priceForStripe,\n    panelLabel: \"Pay now\",\n    token: onToken,\n    stripeKey: publishableKey //move this out into own file\n    ,\n    style: {\n      'margin': '2vh 0vh 0vw -5vw'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 3\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  film: state.film,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  updateFilm,\n  updateUserTickets\n})(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.jsx"],"names":["React","connect","RouteComponentProps","StripeCheckout","ticketType","filmType","updateFilm","updateUserTickets","axios","StripeCheckoutButton","price","filmData","ticketData","priceForStripe","publishableKey","onToken","token","isNaN","alert","url","method","data","amount","onPayment","then","response","console","log","window","location","replace","catch","error","mapStateToProps","state","film","auth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { ticketType, filmType } from '../componentTypes/componentTypes';\nimport { updateFilm } from '../../actions/film';\nimport { updateUserTickets } from '../../actions/auth';\nimport axios from 'axios';\n\n// interface ChildComponentProps extends RouteComponentProps<any> {\n//   history: any;\n//   // match: any;\n//   // location: any;\n// }\n\n// interface StripeProps {\n// \t\tprice: number; \n// \t\tfilmData: filmType;\n// \t\tticketData: ticketType;\n// \t\tupdateFilm: (filmData) => void; \n// \t  updateUserTickets: (ticketData) => void;\n// \t  // stripePayment:\n// \t}\n\n// type JointStripeProps = ChildComponentProps & StripeProps; \n\nconst StripeCheckoutButton = ({ \n\t\tprice, \n\t\tfilmData, \n\t\tticketData, \n\t\tupdateFilm, \n\t  updateUserTickets,\n\t\t// history, \n\t\t// location \n\t}) => {\n\n\t// console.log(price)\n\t// console.log(filmData)\n\t// console.log(ticketData)\n\n\t\t\tconst priceForStripe = price * 100;\n\t\t\t// const publishableKey = 'pk_test_GxoLwpaJRAn1kdTQGlL8EwZa00qqtVHbM3';\n\t\t\tconst publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\n\t\t\t\n\t\t\t\n\t\t\tconst onToken = token => {\n\t\t\t\t// console.log(token)\n\t\t\tif(isNaN(priceForStripe) || priceForStripe < 1) {\n\t\t\t\talert('Please add tickets before submitting');\t\n\t\t\t\treturn; \n\t\t\t}\n\n\t\t\t// interface PayTypes {\n\t\t\t// \t\turl: string, \n\t\t\t// \t\tmethod: string,\n\t\t\t// \t\tdata: {\n\t\t\t// \t\t\tamount: number,\n\t\t\t// \t\t\ttoken: number\n\t\t\t// \t\t}\n\t\t\t// }\n\t\t\t\n\t\t\taxios(\n\t\t\t{ \n\t\t\t\turl: '/api/film/payment', \n\t\t\t\tmethod: 'post',\n\t\t\t\tdata: {\n\t\t\t\t\tamount: priceForStripe,\n\t\t\t\t\ttoken: token\n\t\t\t\t}\n\t\t\t }, onPayment())\n\t\t\t.then(response => {\n\t\t\t\tconsole.log('resp is ' + response)\n\t\t\t \t// alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n\t\t\t \twindow.location.replace('http://localhost:3000/film/dashboard');\n\t\t\t })\n\t\t\t.catch(error => {\n\t\t\t\t// console.log('Payment error: ', JSON.parse(error)); \t\n\t\t\t\tconsole.log('Payment error: ' + error); \t\n\t\t\t \talert('Payment error. Please use the provided credit card details');\t\n\t\t\t }) \n\t} \n\n  \tconst onPayment = () => {\n\t    //prob need history in these two to complete\n\t    //solve other problems first\n\t    updateFilm(filmData);\n\t    updateUserTickets(ticketData);\n  \t};\n\n\treturn (\n\t\t<div \n\t\tclassName='how-it-works stripe'>\n\t\t<StripeCheckout\n\t\tlabel='Pay now'\n\t\tname='Saturday Cinema Club'\n\t\tbillingAddress\n\t\tshippingAddress\n\t\tdescription={`Your total is £{price}`}\n\t\tamount={priceForStripe}\n\t\tpanelLabel='Pay now'\n\t\ttoken={onToken}\n\t\tstripeKey={publishableKey}\n\t\t//move this out into own file\n\t\tstyle={{'margin':'2vh 0vh 0vw -5vw'}}\n\t\t/>\n\t\t</div>\n\t\t)\n\t}\n\nconst mapStateToProps = state => ({\n  film: state.film,\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps, { \n  updateFilm, \n  updateUserTickets \n})(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}