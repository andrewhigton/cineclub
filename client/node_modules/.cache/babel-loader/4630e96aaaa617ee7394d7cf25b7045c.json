{"ast":null,"code":"'use strict';\n\nvar isPlainObject = require('lodash.isplainobject');\n\nvar stripeMethod = require('./StripeMethod');\n\nvar utils = require('./utils');\n\nmodule.exports = {\n  create: stripeMethod({\n    method: 'POST'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    methodType: 'list'\n  }),\n  retrieve: stripeMethod({\n    method: 'GET',\n    path: '/{id}',\n    urlParams: ['id']\n  }),\n  update: stripeMethod({\n    method: 'POST',\n    path: '{id}',\n    urlParams: ['id']\n  }),\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: '{id}',\n    urlParams: ['id']\n  }),\n  setMetadata: function (id, key, value, auth, cb) {\n    var self = this;\n    var data = key;\n    var isObject = isPlainObject(key); // We assume null for an empty object\n\n    var isNull = data === null || isObject && !Object.keys(data).length; // Allow optional passing of auth & cb:\n\n    if ((isNull || isObject) && typeof value == 'string') {\n      auth = value;\n    } else if (typeof auth != 'string') {\n      if (!cb && typeof auth == 'function') {\n        cb = auth;\n      }\n\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n    return utils.callbackifyPromiseWithTimeout(new Promise(function (resolve, reject) {\n      if (isNull) {\n        // Reset metadata:\n        sendMetadata(null, auth);\n      } else if (!isObject) {\n        // Set individual metadata property:\n        var metadata = {};\n        metadata[key] = value;\n        sendMetadata(metadata, auth);\n      } else {\n        // Set entire metadata object after resetting it:\n        this._request('POST', null, path, {\n          metadata: null\n        }, auth, {}, function (err, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          sendMetadata(data, auth);\n        });\n      }\n\n      function sendMetadata(metadata, auth) {\n        self._request('POST', null, path, {\n          metadata: metadata\n        }, auth, {}, function (err, response) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(response.metadata);\n          }\n        });\n      }\n    }.bind(this)), cb);\n  },\n  getMetadata: function (id, auth, cb) {\n    if (!cb && typeof auth == 'function') {\n      cb = auth;\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n    return utils.callbackifyPromiseWithTimeout(new Promise(function (resolve, reject) {\n      this._request('GET', null, path, {}, auth, {}, function (err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(response.metadata);\n        }\n      });\n    }.bind(this)), cb);\n  }\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/StripeMethod.basic.js"],"names":["isPlainObject","require","stripeMethod","utils","module","exports","create","method","list","methodType","retrieve","path","urlParams","update","del","setMetadata","id","key","value","auth","cb","self","data","isObject","isNull","Object","keys","length","urlData","createUrlData","createFullPath","callbackifyPromiseWithTimeout","Promise","resolve","reject","sendMetadata","metadata","_request","err","response","bind","getMetadata"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isPlainObject = require('lodash.isplainobject');\nvar stripeMethod = require('./StripeMethod');\nvar utils = require('./utils');\n\nmodule.exports = {\n\n  create: stripeMethod({\n    method: 'POST',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n    methodType: 'list',\n  }),\n\n  retrieve: stripeMethod({\n    method: 'GET',\n    path: '/{id}',\n    urlParams: ['id'],\n  }),\n\n  update: stripeMethod({\n    method: 'POST',\n    path: '{id}',\n    urlParams: ['id'],\n  }),\n\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: '{id}',\n    urlParams: ['id'],\n  }),\n\n  setMetadata: function(id, key, value, auth, cb) {\n    var self = this;\n    var data = key;\n    var isObject = isPlainObject(key);\n    // We assume null for an empty object\n    var isNull = data === null || (isObject && !Object.keys(data).length);\n\n    // Allow optional passing of auth & cb:\n    if ((isNull || isObject) && typeof value == 'string') {\n      auth = value;\n    } else if (typeof auth != 'string') {\n      if (!cb && typeof auth == 'function') {\n        cb = auth;\n      }\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n\n    return utils.callbackifyPromiseWithTimeout(new Promise((function(resolve, reject) {\n      if (isNull) {\n        // Reset metadata:\n        sendMetadata(null, auth);\n      } else if (!isObject) {\n        // Set individual metadata property:\n        var metadata = {};\n        metadata[key] = value;\n        sendMetadata(metadata, auth);\n      } else {\n        // Set entire metadata object after resetting it:\n        this._request('POST', null, path, {\n          metadata: null,\n        }, auth, {}, function(err, response) {\n          if (err) {\n            return reject(err);\n          }\n          sendMetadata(data, auth);\n        });\n      }\n\n      function sendMetadata(metadata, auth) {\n        self._request('POST', null, path, {\n          metadata: metadata,\n        }, auth, {}, function(err, response) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(response.metadata);\n          }\n        });\n      }\n    }).bind(this)), cb);\n  },\n\n  getMetadata: function(id, auth, cb) {\n    if (!cb && typeof auth == 'function') {\n      cb = auth;\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n\n    return utils.callbackifyPromiseWithTimeout(new Promise((function(resolve, reject) {\n      this._request('GET', null, path, {}, auth, {}, function(err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(response.metadata);\n        }\n      });\n    }).bind(this)), cb);\n  },\n\n};\n"]},"metadata":{},"sourceType":"script"}