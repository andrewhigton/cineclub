{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar crypto = require('crypto');\n\nvar utils = require('./utils');\n\nvar Error = require('./Error');\n\nvar Webhook = {\n  DEFAULT_TOLERANCE: 300,\n  // 5 minutes\n  constructEvent: function (payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n    var jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  }\n};\nvar signature = {\n  EXPECTED_SCHEME: 'v1',\n  _computeSignature: function (payload, secret) {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  },\n  verifyHeader: function (payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    var details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var expectedSignature = this._computeSignature(details.timestamp + '.' + payload, secret);\n\n    var signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    return true;\n  }\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(function (accum, item) {\n    var kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/node_modules/stripe/lib/Webhooks.js"],"names":["Buffer","require","crypto","utils","Error","Webhook","DEFAULT_TOLERANCE","constructEvent","payload","header","secret","tolerance","signature","verifyHeader","jsonPayload","JSON","parse","EXPECTED_SCHEME","_computeSignature","createHmac","update","digest","isBuffer","toString","details","parseHeader","timestamp","StripeSignatureVerificationError","message","detail","signatures","length","expectedSignature","signatureFound","filter","secureCompare","bind","timestampAge","Math","floor","Date","now","scheme","split","reduce","accum","item","kv","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar crypto = require('crypto');\n\nvar utils = require('./utils');\nvar Error = require('./Error');\n\nvar Webhook = {\n  DEFAULT_TOLERANCE: 300, // 5 minutes\n\n  constructEvent: function(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n\n    var jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n};\n\nvar signature = {\n  EXPECTED_SCHEME: 'v1',\n\n  _computeSignature: function(payload, secret) {\n    return crypto.createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  },\n\n  verifyHeader: function(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n\n    var details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header: header,\n          payload: payload,\n        },\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header: header,\n          payload: payload,\n        },\n      });\n    }\n\n    var expectedSignature = this._computeSignature(details.timestamp + '.' + payload, secret);\n\n    var signatureFound = !!details.signatures\n      .filter(utils.secureCompare.bind(utils, expectedSignature))\n      .length;\n\n    if (!signatureFound) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' +\n          ' Are you passing the raw request body you received from Stripe?' +\n          ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header: header,\n          payload: payload,\n        },\n      });\n    }\n\n    var timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header: header,\n          payload: payload,\n        },\n      });\n    }\n\n    return true;\n  },\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(function(accum, item) {\n    var kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: [],\n  });\n}\n\nWebhook.signature = signature;\n\nmodule.exports = Webhook;\n"]},"metadata":{},"sourceType":"script"}