{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport axios from 'axios';\n\nconst ifValidCardElement = card => card === null;\n\n// interface JointBookingProps extends TicketFilmTypes {\n// }\nlet ticketDataForDispatch;\nlet filmDataForDispatch; //add type checks for this lot\n\nconst StripeCheckoutButton = _ref => {\n  let {\n    filmData,\n    ticketData,\n    price,\n    updateUserTickets,\n    updateFilm,\n    history\n  } = _ref;\n  const stripe = useStripe();\n  const elements = useElements();\n  let currentUser = 'bob';\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false); //this isn't working\n\n  ticketDataForDispatch = ticketData;\n  filmDataForDispatch = filmData;\n  console.log('ticket ', ticketDataForDispatch);\n  console.log('film ', filmDataForDispatch);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    try {\n      var _paymentResult$paymen;\n\n      const response = await axios.post('http://localhost:5000/api/film/payment');\n      const clientSecret = response.data; // console.log('button call', clientSecret)\n\n      const cardDetails = elements.getElement(CardElement); // if(!ifValidCardElement(cardDetails)) {\n      // \tconsole.log('failed1', cardDetails)\n      // \treturn;\t\n      // }\n\n      if (cardDetails === null) return;\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: 'Andrew Higton'\n          }\n        }\n      });\n\n      if ((paymentResult === null || paymentResult === void 0 ? void 0 : (_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        alert('payment success');\n        console.log('success'); // updateUserTickets(ticketDataForDispatch);\n        // updateFilm(filmDataForDispatch);\n\n        updateUserTickets(ticketData);\n        updateFilm(filmData);\n      }\n\n      setIsProcessingPayment(false);\n    } catch (err) {\n      if (err instanceof Error) {\n        alert(err.message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    onSubmit: paymentHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Credit Card Payment:\"), /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isProcessingPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 10\n    }\n  }, \"Pay Now\"))));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch)),\n    updateFilm: () => dispatch(filmDataForDispatch)\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/code/typescript/cineclub/client/src/components/stripe-button/stripe-button.tsx"],"names":["React","useState","connect","CardElement","useStripe","useElements","FormContainer","PaymentFormContainer","updateUserTickets","axios","ifValidCardElement","card","ticketDataForDispatch","filmDataForDispatch","StripeCheckoutButton","filmData","ticketData","price","updateFilm","history","stripe","elements","currentUser","isProcessingPayment","setIsProcessingPayment","console","log","paymentHandler","e","preventDefault","response","post","clientSecret","data","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","paymentIntent","status","alert","err","Error","message","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { CardElement, useStripe, useElements,  } from '@stripe/react-stripe-js';\nimport { StripeCardElement  } from '@stripe/stripe-js';\nimport { FormContainer } from './stripe-button.styles';\nimport { stripePayment } from '../../actions/film';\nimport { PaymentButton, PaymentFormContainer } from './stripe-button.styles';\nimport { updateUserTickets } from '../../actions/auth';\nimport { updateFilm } from '../../actions/film';\nimport { ticketType, filmInterface, filmType } from '../../utils/componentTypes';\nimport axios from 'axios';\n\nconst ifValidCardElement = (card: StripeCardElement | null): card is StripeCardElement => card === null;  \n\n\n\n\ninterface TicketFilmTypes {\n\tfilmData: filmType;\n\tticketData: ticketType;\n\tprice: number;\n\tupdateUserTickets: (ticketDataForDispatch) => void; \n\tupdateFilm: (filmDataForDispatch) => void;\n\thistory \n}\n\n// interface JointBookingProps extends TicketFilmTypes {\n\t\n// }\n\nlet ticketDataForDispatch;\nlet filmDataForDispatch;\n\n//add type checks for this lot\n\nconst StripeCheckoutButton: React.FC<TicketFilmTypes> = ({\n\tfilmData, \n\tticketData, \n\tprice,\n\tupdateUserTickets,\n\tupdateFilm,\n\thistory\n\t}) => {\n\nconst stripe = useStripe();\nconst elements = useElements();\nlet currentUser = 'bob';\nconst [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\n//this isn't working\nticketDataForDispatch = ticketData;\nfilmDataForDispatch = filmData;\nconsole.log('ticket ', ticketDataForDispatch)\nconsole.log('film ', filmDataForDispatch)\n\nconst paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n\t  \t\n\n\n\te.preventDefault();\n\tif(!stripe || !elements) {\n\t\treturn;\n\t}\n\n\ttry  {\n\tconst response = await axios.post('http://localhost:5000/api/film/payment') \n\t\n\t\tconst clientSecret = response.data;\n \t\t// console.log('button call', clientSecret)\n\t\tconst cardDetails = elements.getElement(CardElement)\n\t\t// if(!ifValidCardElement(cardDetails)) {\n\t\t// \tconsole.log('failed1', cardDetails)\n\t\t// \treturn;\t\n\t\t// }\n\n\n\t\tif(cardDetails === null) return;\n\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: 'Andrew Higton',\n        },\n      },\n    });\n    \n    if(paymentResult?.paymentIntent?.status === 'succeeded') {\n    \talert('payment success');\n    \tconsole.log('success')\n    \t// updateUserTickets(ticketDataForDispatch);\n    \t// updateFilm(filmDataForDispatch);\n    \tupdateUserTickets(ticketData);\n    \tupdateFilm(filmData);\n    }\n    \n    setIsProcessingPayment(false);\t\n\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t  alert(err.message);\n\t\t\t}\n\t}\n\n}\n\n\treturn (\n\t\t\t<div> \n\t\t\t\t<PaymentFormContainer>\n      \t\t<FormContainer onSubmit={paymentHandler}>\n\t        \t<h2>Credit Card Payment:</h2>\n\t        \t<CardElement />\n\t        <button disabled={isProcessingPayment}>Pay Now</button>\n\t      </FormContainer>\n    \t\t</PaymentFormContainer>\n\t\t\t</div>\n\t\t )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n     updateUserTickets: () => dispatch(updateUserTickets(ticketDataForDispatch)),\n     updateFilm: () => dispatch(filmDataForDispatch) \n  }\n}\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton); \n\n"]},"metadata":{},"sourceType":"module"}